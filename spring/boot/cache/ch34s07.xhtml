<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>解决Expire 和 TTL 过期时间</title><link rel="stylesheet" type="text/css" href="../../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch34s06.xhtml" title="@Caching"/><link rel="next" href="../email/ch35.xhtml" title="第 35 章 Spring boot with Email"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">解决Expire 和 TTL 过期时间</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch34s06.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 34 章 Spring boot with Caching</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="../email/ch35.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="解决Expire 和 TTL 过期时间"><div class="titlepage"><div><div><h3 class="title">解决Expire 和 TTL 过期时间</h3></div></div></div><p>Springboot 1.x</p><pre class="programlisting">
        
@Bean
public CacheManager cacheManager(RedisTemplate redisTemplate) {
    RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);
    cacheManager.setDefaultExpiration(60);	//缓存默认 60 秒
    Map&lt;String, Long&gt; expiresMap = new HashMap&lt;&gt;();
    expiresMap.put("Product", 5L);  //设置 key = Product 时 5秒缓存。你可以添加很多规则。 
    cacheManager.setExpires(expiresMap);
    return cacheManager;
}			
        
		</pre><p>Springboot 2.x</p><pre class="programlisting">
        
package api.config;

import java.time.Duration;
import java.util.HashMap;
import java.util.Map;

import org.springframework.cache.CacheManager;
import org.springframework.cache.interceptor.KeyGenerator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.cache.RedisCacheWriter;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.RedisSerializationContext;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;

@Configuration
public class CachingConfigurer {

public CachingConfigurer() {
    // TODO Auto-generated constructor stub
}

@Bean
public KeyGenerator simpleKeyGenerator() {
    return (o, method, objects) -&gt; {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(o.getClass().getSimpleName());
        stringBuilder.append(".");
        stringBuilder.append(method.getName());
        stringBuilder.append("[");
        for (Object obj : objects) {
            stringBuilder.append(obj.toString());
        }
        stringBuilder.append("]");

        return stringBuilder.toString();
    };
}

@Bean
public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {
    return new RedisCacheManager(RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory), 
    this.redisCacheConfiguration(600), 	// 默认配置
    this.initialCacheConfigurations());	// 指定key过期时间配置
}
           
private Map&lt;String, RedisCacheConfiguration&gt; initialCacheConfigurations() {
    Map&lt;String, RedisCacheConfiguration&gt; redisCacheConfigurationMap = new HashMap&lt;&gt;();
    redisCacheConfigurationMap.put("UserInfoList", this.redisCacheConfiguration(3000));
    redisCacheConfigurationMap.put("UserInfoListAnother", this.redisCacheConfiguration(18000));

    return redisCacheConfigurationMap;
}

private RedisCacheConfiguration redisCacheConfiguration(Integer seconds) {
    Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer&lt;&gt;(Object.class);
    ObjectMapper om = new ObjectMapper();
    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
    jackson2JsonRedisSerializer.setObjectMapper(om);

    RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();
    redisCacheConfiguration = redisCacheConfiguration.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer)).entryTtl(Duration.ofSeconds(seconds));

    return redisCacheConfiguration;
}

}

        
		</pre><p/><pre class="programlisting">
        
@Cacheable(value = "DefaultKey", keyGenerator = "simpleKeyGenerator") // 600秒，使用默认策略
@Cacheable(value = "UserInfoList", keyGenerator = "simpleKeyGenerator") // 3000秒
@Cacheable(value = "UserInfoListAnother", keyGenerator = "simpleKeyGenerator") // 18000秒

        
		</pre><pre class="screen">
        
127.0.0.1:6379&gt; keys *
1) "test2::SimpleKey []"

127.0.0.1:6379&gt; ttl "test2::SimpleKey []"
(integer) 584
        
        
		</pre></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch34s06.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch34.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="../email/ch35.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">@Caching </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> 第 35 章 Spring boot with Email</td></tr></table></div></footer></body></html>