<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>写入PID文件</title><link rel="stylesheet" type="text/css" href="../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch04s03.xhtml" title="容器中如何优雅关闭 Springboot"/><link rel="next" href="properties/ch05.xhtml" title="第 5 章 Properties 配置文件"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">写入PID文件</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch04s03.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 4 章 如何优雅停止 Springboot 运行</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="properties/ch05.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="id1478"><div class="titlepage"><div><div><h3 class="title">写入PID文件</h3></div></div></div><p>我们明白了 kill 的原理后，常常需要与 pid 打交道，使用 ps 命令是可以查看 pid 的，但是当我们运行多个实例的时候会常常搞混，所以最好的方式是让 springboot 把PID写入到文件中。</p><pre class="programlisting">
		
package cn.netkiller;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.ApplicationPidFileWriter;

@SpringBootApplication

public class Application {

	public static void main(String[] args) {

		System.out.println("Starting...");
		SpringApplication springApplication = new SpringApplication(Application.class);
		springApplication.addListeners(new ApplicationPidFileWriter());
		springApplication.run(args);
	}
}		
		
		</pre><p>程序运行后会在当前目录下产生一个 PID 文件</p><pre class="screen">
		
neo@MacBook-Pro-Neo ~/workspace/microservice/test % cat application.pid 
44027
		
		</pre><p>修改 pid 文件位置可以配置 application.properties </p><pre class="screen">
		
server.port=8080
spring.pid.file=/tmp/spring.pid
		
		</pre><p>在启动的时候指定 pid 文件位置</p><pre class="programlisting">
		
		SpringApplication application = new SpringApplication(Application.class);
        application.addListeners(new ApplicationPidFileWriter("/tmp/app.pid"));
        application.run();		
		
		</pre><p>最后说说容器，容器的进程ID永远是 1 所以配置与否自己斟酌。</p><pre class="screen">
		
[root@localhost netkiller.cn]# docker exec -it spring cat /tmp/spring.pid
1		
		
		</pre></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch04s03.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch04.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="properties/ch05.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">容器中如何优雅关闭 Springboot </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> 第 5 章 Properties 配置文件</td></tr></table></div></footer></body></html>