<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>测试类</title><link rel="stylesheet" type="text/css" href="../../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch27.xhtml" title="第 27 章 SpringBootTest"/><link rel="next" href="ch27s03.xhtml" title=""/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">测试类</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch27.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 27 章 SpringBootTest</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch27s03.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="test.class"><div class="titlepage"><div><div><h3 class="title">测试类</h3></div></div></div><p>创建测试类，在测试类的类头部添加：@RunWith(SpringRunner.class)和@SpringBootTest注解，在测试方法的前添加@Test，最后选择方法右键run运行。</p><pre class="programlisting">
		
@RunWith(SpringRunner.class)
@SpringBootTest
public class WalletTest {

	@Autowired
	WalletService walletService;

	public WalletTest() {
		// TODO Auto-generated constructor stub
	}

	@Test
	public void test() throws Exception {

		Assert.assertEquals(5,5);

	}
}
		
		</pre><section class="section" id="spring.boot.test"><div class="titlepage"><div><div><h4 class="title">Junit基本注解介绍</h4></div></div></div><pre class="screen">
			
@RunWith
在JUnit中有很多个Runner，他们负责调用你的测试代码，每一个Runner都有各自的特殊功能，你要根据需要选择不同的Runner来运行你的测试代码。
如果我们只是简单的做普通Java测试，不涉及Spring Web项目，你可以省略@RunWith注解，这样系统会自动使用默认Runner来运行你的代码。					
			
//在所有测试方法前执行一次，一般在其中写上整体初始化的代码 
@BeforeClass

//在所有测试方法后执行一次，一般在其中写上销毁和释放资源的代码 
@AfterClass

//在每个测试方法前执行，一般用来初始化方法（比如我们在测试别的方法时，类中与其他测试方法共享的值已经被改变，为了保证测试结果的有效性，我们会在@Before注解的方法中重置数据）
@Before

//在每个测试方法后执行，在方法执行完成后要做的事情
@After

// 测试方法执行超过1000毫秒后算超时，测试将失败 
@Test(timeout = 1000)

// 测试方法期望得到的异常类，如果方法执行没有抛出指定的异常，则测试失败
@Test(expected = Exception.class)

// 执行测试时将忽略掉此方法，如果用于修饰类，则忽略整个类 
@Ignore("not ready yet") 
@Test	
			
			</pre></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch27.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch27.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch27s03.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">第 27 章 SpringBootTest </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> </td></tr></table></div></footer></body></html>