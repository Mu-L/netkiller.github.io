<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>第 28 章 Spring boot with Aop</title><link rel="stylesheet" type="text/css" href="../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="test/ch27s07.xhtml" title="WebTestClient"/><link rel="next" href="ch29.xhtml" title="第 29 章 Spring boot with starter"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">第 28 章 Spring boot with Aop</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="test/ch27s07.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">部分 I. Spring Boot</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch29.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="chapter" id="spring.aop"><div class="titlepage"><div><div><h2 class="title">第 28 章 Spring boot with Aop</h2></div></div></div><div class="toc"><div class="toc-title">目录</div><ul class="toc"><li><span class="section"><a href="ch28.xhtml#Aspect">Aspect</a></span><ul><li><span class="section"><a href="ch28.xhtml#id882">Maven</a></span></li><li><span class="section"><a href="ch28.xhtml#id883">Pojo 类</a></span></li><li><span class="section"><a href="ch28.xhtml#id884">Service 类</a></span></li><li><span class="section"><a href="ch28.xhtml#id885">Aspect 类</a></span></li><li><span class="section"><a href="ch28.xhtml#id886">控制器</a></span></li><li><span class="section"><a href="ch28.xhtml#id887">Application</a></span></li><li><span class="section"><a href="ch28.xhtml#id888">测试</a></span></li></ul></li></ul></div><section class="section" id="Aspect"><div class="titlepage"><div><div><h3 class="title">Aspect</h3></div></div></div><section class="section" id="id882"><div class="titlepage"><div><div><h4 class="title">Maven</h4></div></div></div><pre class="screen">
			
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;
		&lt;/dependency&gt;			
			
			</pre></section><section class="section" id="id883"><div class="titlepage"><div><div><h4 class="title">Pojo 类</h4></div></div></div><pre class="programlisting">
			
package cn.netkiller.aop.pojo;

import lombok.Data;

@Data
public class Employee {
	private String id;
	private String name;

	public Employee() {
		// TODO Auto-generated constructor stub
	}

}
			
			
			</pre></section><section class="section" id="id884"><div class="titlepage"><div><div><h4 class="title">Service 类</h4></div></div></div><pre class="programlisting">
			
package cn.netkiller.aop.service;

import org.springframework.stereotype.Service;

import cn.netkiller.aop.pojo.Employee;

@Service
public class EmployeeService {

	public EmployeeService() {
		// TODO Auto-generated constructor stub
	}

	public Employee createEmployee(String id, String name) {

		Employee emp = new Employee();
		emp.setName(name);
		emp.setId(id);
		return emp;
	}

	public void deleteEmployee(String id) {

	}
}
			
			
			</pre></section><section class="section" id="id885"><div class="titlepage"><div><div><h4 class="title">Aspect 类</h4></div></div></div><pre class="programlisting">
			
package cn.netkiller.aop.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class EmployeeServiceAspect {
	public EmployeeServiceAspect() {
	}

	@Before(value = "execution(* cn.netkiller.aop.service.EmployeeService.*(..)) and args(id, name)")
	public void beforeAdvice(JoinPoint joinPoint, String id, String name) {
		System.out.println("Before method:" + joinPoint.getSignature());

		System.out.println("Creating Employee with id: " + id + ", name: " + name);
	}

	@After(value = "execution(* cn.netkiller.aop.service.EmployeeService.*(..)) and args(id,name)")
	public void afterAdvice(JoinPoint joinPoint, String id, String name) {
		System.out.println("After method:" + joinPoint.getSignature());

		System.out.println("Successfully created Employee with id: " + id + ", name: " + name);
	}
}		
			
			</pre></section><section class="section" id="id886"><div class="titlepage"><div><div><h4 class="title">控制器</h4></div></div></div><pre class="programlisting">
			
package cn.netkiller.aop.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import cn.netkiller.aop.pojo.Employee;
import cn.netkiller.aop.service.EmployeeService;

@RestController
public class EmployeeController {

	public EmployeeController() {
		// TODO Auto-generated constructor stub
	}

	@Autowired
	private EmployeeService employeeService;

	@RequestMapping(value = "/add/employee", method = RequestMethod.GET)
	public Employee addEmployee(@RequestParam("id") String id, @RequestParam("name") String name) {

		return employeeService.createEmployee(id, name);

	}

	@RequestMapping(value = "/remove/employee", method = RequestMethod.GET)
	public String removeEmployee(@RequestParam("id") String id) {

		employeeService.deleteEmployee(id);

		return "Employee removed";
	}

}
			
			
			</pre></section><section class="section" id="id887"><div class="titlepage"><div><div><h4 class="title">Application</h4></div></div></div><pre class="programlisting">
			
package cn.netkiller.aop;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
	public static void main(String[] args) {
		System.out.println("Hello World!");
		SpringApplication.run(Application.class, args);
	}
}
			
			
			</pre></section><section class="section" id="id888"><div class="titlepage"><div><div><h4 class="title">测试</h4></div></div></div><p>触发 Aspect</p><pre class="screen">
			
neo@MacBook-Pro ~ % curl http://localhost:8080/add/employee\?id\=1\&amp;name\=neo
{"id":"1","name":"neo"}
			
			</pre><p>控制台输出效果</p><pre class="screen">
			
Before method:Employee cn.netkiller.aop.service.EmployeeService.createEmployee(String,String)
Creating Employee with id: 1, name: neo
After method:Employee cn.netkiller.aop.service.EmployeeService.createEmployee(String,String)
Successfully created Employee with id: 1, name: neo
			
			</pre></section></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="test/ch27s07.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="pt01.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch29.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">WebTestClient </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> 第 29 章 Spring boot with starter</td></tr></table></div></footer></body></html>