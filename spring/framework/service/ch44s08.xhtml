<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>构造方法</title><link rel="stylesheet" type="text/css" href="../../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch44s07.xhtml" title="Service 单例/多例模式"/><link rel="next" href="../jsp/ch45.xhtml" title="第 45 章 Spring boot with Webpage"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">构造方法</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch44s07.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 44 章 Service</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="../jsp/ch45.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="id4612"><div class="titlepage"><div><div><h2 class="title" style="clear: both">构造方法</h2></div></div></div><pre class="programlisting">
		
	@Autowired
    private TestService testService;
		
		</pre><p>当我们使用 @Autowired 注解，构造方法先于 @Value 执行，所以我们无法在构造方法中获得 @Value 注入的值。</p><pre class="programlisting">
		
package cn.netkiller.services;

import lombok.Data;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
@Data
@Slf4j
public class TestService {
    @Value("${app.id}")
    private String appId;

    public TestService() {
        log.info(this.appId);
    }

}

		
		</pre><p>@Value 作为构造方法的参数可以实现赋值需求</p><pre class="programlisting">
		
package cn.netkiller.services;

import lombok.Data;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
@Data
@Slf4j
public class TestService {

    private String appId;

    public TestService(@Value("${app.id}") String appId) {
        this.appId = appId;
        log.info(this.appId);
    }
}

		
		</pre><p>同时还能使用 new 创建实例</p><pre class="programlisting">
		
    TestService test = new TestService("Test");
    test.getAppId();
		
		</pre></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch44s07.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch44.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="../jsp/ch45.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">Service 单例/多例模式 </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> 第 45 章 Spring boot with Webpage</td></tr></table></div></footer></body></html>