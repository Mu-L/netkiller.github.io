<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Service 单例/多例模式</title><link rel="stylesheet" type="text/css" href="../../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch44s06.xhtml" title="AopContext"/><link rel="next" href="ch44s08.xhtml" title="构造方法"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">Service 单例/多例模式</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch44s06.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 44 章 Service</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch44s08.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="service.singleton"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Service 单例/多例模式</h2></div></div></div><section class="section" id="id1069"><div class="titlepage"><div><div><h3 class="title">Service 是单例模式</h3></div></div></div><p>Service 的变量是共享的，这是与 new Object 的区别。</p><p>同步执行</p><pre class="programlisting">
			
package cn.netkiller.service;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

@Service
@Slf4j
@Data
public class TestService {

    private String share;

}
			
			</pre><pre class="programlisting">
			
    @GetMapping("get")
    public String get() {
        return testService.getShare();
    }

    @GetMapping("set")
    public String set(@RequestParam("value") String value) {
        testService.setShare(value);
        return testService.getShare();
    }			
			
			</pre><pre class="screen">
			
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://localhost:8080/test/set?value=aaa'
aaa⏎                                                                                                                                                                                                                                                
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://localhost:8080/test/get'
aaa⏎                                                                                                                                                                                                                                                
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://localhost:8080/test/set?value=bbb'
bbb⏎                                                                                                                                                                                                                                                
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://localhost:8080/test/get'
bbb⏎                			
			
			</pre><p>我们可以看到 Service 是 singleton 单例模式</p><pre class="screen">
			
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://neo:chen@localhost:8080/actuator/beans' |jq '.contexts.[].beans.testService'
{
  "aliases": [],
  "scope": "singleton",
  "type": "cn.netkiller.service.TestService$$SpringCGLIB$$0",
  "resource": "file [/Users/neo/workspace/watch/target/classes/cn/netkiller/service/TestService.class]",
  "dependencies": []
}		
			
			</pre><p>在多线程或者异步执行的情况会更糟</p><pre class="programlisting">
		
package cn.netkiller.service;

import cn.netkiller.domain.Chat;
import cn.netkiller.repository.ChatRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class TestService {

    private String test;

    @Async
    public void test1() {
        this.test = "Test 1";
    }

    @Async
    public void test2() {
        this.test = "Test 2";
    }

    @Async
    public void test() {
        log.info(this.test);
    }
}

		
			</pre><pre class="programlisting">
		
    @Autowired
    private TestService testService;
    		
    @GetMapping("test")
    private Mono&lt;String&gt; test() {
        chatService.test();
        return Mono.just("OK");
    }
    		
    @GetMapping("/test1")
    public Mono&lt;String&gt; test1() {
        String test = "测试";
        chatService.test1();
        return Mono.just(test);
    }

    @GetMapping("/test2")
    public Mono&lt;String&gt; test2() {
        chatService.test2();
        return Mono.just("OK");
    }

		
			</pre><pre class="programlisting">
		
2024-01-01T14:09:10.022+08:00  INFO 59782 --- [watch-development] [         task-1] cn.netkiller.service.TestService           : null
2024-01-01T14:09:24.694+08:00  INFO 59782 --- [watch-development] [         task-3] cn.netkiller.service.TestService           : Test 1
2024-01-01T14:10:04.394+08:00  INFO 59782 --- [watch-development] [         task-8] cn.netkiller.service.TestService           : Test 2
		
			</pre></section><section class="section" id="id1070"><div class="titlepage"><div><div><h3 class="title">Service 多例实现</h3></div></div></div><p>要实现 Service 多例模式很简单，只需要在 Service 根 Controller 中同时增加
				@Scope("prototype") 即可</p><pre class="programlisting">
			
package cn.netkiller.service;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.context.annotation.Scope;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

@Service
@Slf4j
@Data
@Scope("prototype")
public class TestService {

    private String share = "default";

    public TestService() {
        this.share = "init";
    }
}			
			
			</pre><pre class="programlisting">
			
package cn.netkiller.controller;

import cn.netkiller.ai.AiChain;
import cn.netkiller.annotation.TokenPass;
import cn.netkiller.annotation.TokenVerification;
import cn.netkiller.component.StreamService;
import cn.netkiller.domain.Picture;
import cn.netkiller.domain.PicturePsychoanalysis;
import cn.netkiller.domain.embeddable.StreamTopic;
import cn.netkiller.service.AiService;
import cn.netkiller.service.PicturePsychoanalysisService;
import cn.netkiller.service.TestService;
import cn.netkiller.utils.ResponseJson;
import jakarta.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.MediaType;
import org.springframework.http.codec.ServerSentEvent;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestClient;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.FluxSink;
import reactor.core.publisher.Mono;
import reactor.core.publisher.ParallelFlux;
import reactor.core.scheduler.Schedulers;

import java.io.IOException;
import java.security.Principal;
import java.util.*;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.IntStream;
import java.util.stream.Stream;

@RestController
@Slf4j
@RequestMapping("/test")
@Scope(value = "prototype")
public class TestController {
  
    @Autowired
    private TestService testService;

    @GetMapping("get")
    public String get() {
        return testService.getShare();
    }

    @GetMapping("set")
    public String set(@RequestParam("value") String value) {
        testService.setShare(value);
        return testService.getShare();
    }

}
			
			</pre><pre class="programlisting">
			
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://localhost:8080/test/get'
init⏎                                                                                                                                                                                                                                               
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://localhost:8080/test/set?value=bbb'
bbb⏎                                                                                                                                                                                                                                                
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://localhost:8080/test/get'
init⏎                                                                                                                                                                                                                                               
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://localhost:8080/test/get'
init⏎                                                                                                                                                                                                                                               
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://localhost:8080/test/set?value=aaa'
aaa⏎                                                                                                                                                                                                                                                
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://localhost:8080/test/get'
init⏎ 
			
			</pre><p>去掉构造方法</p><pre class="programlisting">
			
	package cn.netkiller.service;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.context.annotation.Scope;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

@Service
@Slf4j
@Data
@Scope("prototype")
public class TestService {

    private String share = "default";

    public TestService() {
        this.share = "init";
    }
}			
			
			</pre><p>测试结果</p><pre class="programlisting">
			
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://localhost:8080/test/get'
default⏎                                                                                                                                                                                                                                            
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://localhost:8080/test/set?value=aaa'
aaa⏎                                                                                                                                                                                                                                                
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://localhost:8080/test/get'
default⏎ 	
			
			</pre><pre class="screen">
			
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://neo:chen@localhost:8080/actuator/beans' |jq '.contexts.[].beans.testController'
{
  "aliases": [],
  "scope": "prototype",
  "type": "cn.netkiller.controller.TestController$$SpringCGLIB$$0",
  "resource": "file [/Users/neo/workspace/watch/target/classes/cn/netkiller/controller/TestController.class]",
  "dependencies": [
    "picturePsychoanalysisService",
    "streamService",
    "testService",
    "aiService"
  ]
}
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://neo:chen@localhost:8080/actuator/beans' |jq '.contexts.[].beans.testService'
{
  "aliases": [],
  "scope": "prototype",
  "type": "cn.netkiller.service.TestService$$SpringCGLIB$$0",
  "resource": "file [/Users/neo/workspace/watch/target/classes/cn/netkiller/service/TestService.class]",
  "dependencies": []
}
			
			</pre></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch44s06.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch44.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch44s08.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">AopContext </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> 构造方法</td></tr></table></div></footer></body></html>