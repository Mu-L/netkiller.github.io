<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>WebClient</title><link rel="stylesheet" type="text/css" href="../../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch42s10.xhtml" title="并发"/><link rel="next" href="ch42s12.xhtml" title="Webflux 安全"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">WebClient</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch42s10.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 42 章 WebFlux framework</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch42s12.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="webflux.webclient"><div class="titlepage"><div><div><h2 class="title" style="clear: both">WebClient</h2></div></div></div><pre class="screen">
	
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;	
	
	</pre><section class="section" id="id1053"><div class="titlepage"><div><div><h3 class="title">配置 WebClient</h3></div></div></div><pre class="programlisting">
			
@Configuration
public class WebConfig {

  @Bean
  public WebClient webClient() {

    WebClient webClient = WebClient.builder()
      .baseUrl("http://localhost:8080")
      .defaultCookie("cookie-name", "cookie-value")
      .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
      .build();
  }
}			
			
		</pre></section><section class="section" id="id1054"><div class="titlepage"><div><div><h3 class="title">@Controller/@RestController 实例</h3></div></div></div><pre class="programlisting">
		
    @GetMapping("webclient")
    public Mono&lt;String&gt; webclient() {
        WebClient webClient = WebClient.create("http://localhost:8080");
        Mono&lt;String&gt; response = webClient
                .get().uri("/mock/mono")
                .retrieve()
                .bodyToMono(String.class);
        response.subscribe(System.out::println);
        return response;
    }
		
		</pre><p>会返结果</p><pre class="programlisting">
			
public Mono&lt;ResponseEntity&lt;Employee&gt;&gt; createEmployee(Employee newEmployee) {

  return webClient.post()
    .uri("/employees")
    .contentType(MediaType.APPLICATION_JSON)
    .bodyValue(newEmployee)
    .retrieve()
    .toEntity(Employee.class);
}



@PostMapping("/create")
public Mono&lt;ResponseEntity&lt;?&gt;&gt; createEmployee(@RequestBody Employee newEmployee) {

  return employeeService.createEmployee(newEmployee)
    .map(responseEntity -&gt; {
      if (responseEntity.getStatusCode().is2xxSuccessful()) {
        return ResponseEntity.ok(responseEntity.getBody());
      } else {
        return ResponseEntity.status(responseEntity.getStatusCode())
          .body("Failed to create employee");
      }
    })
    .onErrorResume(exception -&gt; {
      return Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
        .body("Internal Server Error: " + exception.getMessage()));
    });
}			
			
		</pre></section><section class="section" id="webclient.get"><div class="titlepage"><div><div><h3 class="title">Get 请求实例</h3></div></div></div><pre class="programlisting">
		
WebClient.create("http://localhost:8080")
    .get()
    .uri("/students")
    .retrieve()
    .bodyToFlux(Student.class);		
			
		</pre></section><section class="section" id="webclient.uri"><div class="titlepage"><div><div><h3 class="title">URI 参数</h3></div></div></div><p>字符串拼接方式</p><pre class="programlisting">
			
WebClient.create("http://localhost:8080")
    .get()
    .uri("/students/" + studentId)
    .retrieve()
    .bodyToMono(Student.class);
			
		</pre><p>通过 uriBuilder 组装 Uri 参数</p><pre class="programlisting">
			
String endpoint = "/employees";
        
UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromPath(endpoint)
    .queryParam("param1", "value1")
    .queryParam("param2", "value2");

webClient.post()
        .uri(uriBuilder.build().toUri())
        .bodyValue(new Employee(...))
        .retrieve()
        .bodyToMono(Employee.class);
			
		</pre><pre class="programlisting">
			
WebClient.create("http://localhost:8080")
    .get()
    .uri(uriBuilder -&gt; uriBuilder
        .path("/student/{studentId}")
        .build(studentId))
    .retrieve()
    .bodyToMono(Student.class);		
    
WebClient.create("http://localhost:8080")
    .get()
    .uri(uriBuilder -&gt; uriBuilder
        .path("/student/{studentId}/assignments/{assignmentId}")
        .build(studentId, assignmentId))
    .retrieve()
    .bodyToMono(Student.class);
			
		</pre><p>uriTemplate 组装 Uri 参数</p><pre class="programlisting">
			
UriTemplate uriTemplate = new UriTemplate(
    "/student/{studentId}/assignments/{assignmentId}");

WebClient.create("http://localhost:8080")
    .get()
    .uri(uriTemplate.expand(studentId, assignmentId))
    .retrieve()
    .bodyToMono(Student.class);			
			
		</pre></section><section class="section" id="webclient.query"><div class="titlepage"><div><div><h3 class="title">查询参数</h3></div></div></div><p>http://localhost:8080/students?firstName=Jon&amp;year=1996
		</p><pre class="programlisting">
			
String firstName = "Jon";
String year = "1996";

WebClient.create("http://localhost:8080")
    .get()
    .uri(uriBuilder -&gt; uriBuilder.path("/students")
        .queryParam("firstName", firstName)
        .queryParam("year", year)
        .build())
    .retrieve()
    .bodyToMono(Student.class);			
			
		</pre><p>http://localhost:8080/students?year=1995,1996,1997</p><pre class="programlisting">
			
WebClient.create("http://localhost:8080")
    .get()
    .uri(uriBuilder -&gt; uriBuilder.path("/students")
        .queryParam("year", String.join(",", "1995", "1996", "1997"))
        .build())
    .retrieve()
    .bodyToMono(Student.class);			
			
		</pre><p>"/products/?category=Phones&amp;category=Tablets"</p><pre class="programlisting">
			
webClient.get()
  .uri(uriBuilder - &gt; uriBuilder
    .path("/products/")
    .queryParam("category", "Phones", "Tablets")
    .build())
  .retrieve()
  .bodyToMono(String.class)
  .onErrorResume(e -&gt; Mono.empty())
  .block();			
			
		</pre></section><section class="section" id="webclient.post"><div class="titlepage"><div><div><h3 class="title">Post 操作演示</h3></div></div></div><pre class="programlisting">
			
Employee newEmployee = ...;  //Create a new employee object
			
webClient.post()
  .uri("/employees")
  .bodyValue(BodyInserters.fromValue(newEmployee))
  .retrieve()
  .toEntity(Employee.class)   //Change here
  .subscribe(
    responseEntity -&gt; {
      // Handle success response here
      HttpStatusCode status = responseEntity.getStatusCode();
      URI location = responseEntity.getHeaders().getLocation();
      Employee createdEmployee = responseEntity.getBody();    // Response body
      // handle response as necessary
    },
    error -&gt; {
      // Handle the error here
      if (error instanceof WebClientResponseException) {
        WebClientResponseException ex = (WebClientResponseException) error;
        HttpStatusCode status = ex.getStatusCode();
        System.out.println("Error Status Code: " + status.value());
        //...
      } else {
        // Handle other types of errors
        System.err.println("An unexpected error occurred: " + error.getMessage());
      }
    }
  );			
			
		</pre></section><section class="section" id="webclient.post.form"><div class="titlepage"><div><div><h3 class="title">Post 表单数据</h3></div></div></div><pre class="programlisting">
			
@Service
public class EmployeeService {

  private final WebClient webClient;

  @Autowired
  public EmployeeService(WebClient webClient) {
      this.webClient = webClient;
  }

  public Mono&lt;Employee&gt; createEmployee(Map&lt;String, String&gt; formParams) {
    return webClient.post()
      .uri("/employees")
      .body(BodyInserters.fromFormData("id", formParams.get("id"))
        .with("name", formParams.get("name"))
        .with("status", formParams.get("status")))
      .retrieve()
      .onStatus(HttpStatus::is4xxClientError, clientResponse -&gt; {
          // Handle 4xx client errors here
      })
      .onStatus(HttpStatus::is5xxServerError, clientResponse -&gt; {
          // Handle 5xx server errors here
      })
      .toEntity(Employee.class)
      .flatMap(responseEntity -&gt; Mono.justOrEmpty(responseEntity.getBody()));
  }
}			
			
		</pre><pre class="programlisting">
			
        WebClient client = WebClient.create("https://www.netkiller.cn");
        FormInserter formInserter = fromMultipartData("name","neo")
                .with("age",19)
                .with("map",ImmutableMap.of("sex","F"))
                .with("file",new File("/tmp/netkiler.doc"));
        Mono&lt;String&gt; result = client.post()
                .uri("/article/index/{id}.html", 256)
                .contentType(MediaType.APPLICATION_JSON)
                .body(formInserter)
                //.bodyValue(ImmutableMap.of("name","neo"))
                .retrieve()
                .bodyToMono(String.class);
        result.subscribe(System.err::println);			
			
		</pre><pre class="programlisting">
		
@RestController
public class HelloController {
 
    // 创建 WebClient 对象
    private WebClient webClient = WebClient.builder()
            .baseUrl("https://www.netkiller.cn/article")
            .build();
 
    @GetMapping("/test")
    public void test() {
        //提交参数设置
        MultiValueMap&lt;String, String&gt; map = new LinkedMultiValueMap&lt;&gt;();
        map.add("title", "linux 手札");
        map.add("body", "测试");
 
        // 发送请求
        Mono&lt;String&gt; mono = webClient
                .post() // POST 请求
                .uri("/posts")  // 请求路径
                .contentType(MediaType.APPLICATION_FORM_URLENCODED)
                .body(BodyInserters.fromFormData(map))
                .retrieve() // 获取响应体
                .bodyToMono(String.class); //响应数据类型转换
 
        // 输出结果
        System.out.println(mono.block());
        return;
    }
}
		
		</pre></section><section class="section" id="webclient.post.multipart"><div class="titlepage"><div><div><h3 class="title">上传文件</h3></div></div></div><pre class="programlisting">
			
MultipartBodyBuilder builder = new MultipartBodyBuilder();

builder.part("file", new FileSystemResource("/tmp/file.txt"));
builder.part("id", "190001", MediaType.TEXT_PLAIN);
builder.part("name", "Lokesh", MediaType.TEXT_PLAIN);
builder.part("status", "active", MediaType.TEXT_PLAIN);

Then we can submit the multipart form data by using the method BodyInserters.fromMultipartData(builder.build()) and send a normal request as in the previous examples.

webClient.post()
    .uri("/employees")
    .contentType(MediaType.MULTIPART_FORM_DATA)
    .body(BodyInserters.fromMultipartData(builder.build()))
    .retrieve()
    .toEntity(Employee.class)
    .doOnError(WriteTimeoutException.class, ex -&gt; {
      System.err.println("WriteTimeout");
    })
    .subscribe(responseEntity -&gt; {
      System.out.println("Status: " + responseEntity.getStatusCode().value());
      System.out.println("Location URI: " + responseEntity.getHeaders().getLocation().toString());
      System.out.println("Created New Employee : " + responseEntity.getBody());
    });			
			
		</pre></section><section class="section" id="webclient.header"><div class="titlepage"><div><div><h3 class="title">设置 HTTP 头</h3></div></div></div><pre class="programlisting">
			
webClient.get()
    .uri("/employees")
    .bodyValue(new Employee(...))
    .header("Authorization", "Bearer auth-token")
    .header("User-Agent", "Mobile App 1.0")
    .retrieve()			
			
		</pre><pre class="programlisting">
			
	WebClient.builder()
        .defaultCookie("session","f1d83210-0fc9-4689-82ab-05df70da3367")
        .defaultUriVariables(ImmutableMap.of("name","kl"))
        .defaultHeader("header","neo")
        .defaultHeaders(httpHeaders -&gt; {
            httpHeaders.add("header1","neo");
            httpHeaders.add("header2","chen");
        })
        .defaultCookies(cookie -&gt;{
            cookie.add("cookie1","neo");
            cookie.add("cookie2","netkiller");
        })
        .baseUrl("https://www.netkiller.cn")
        .build();			
			
		</pre><p>If-None-Match、If-Modified-Since</p><pre class="programlisting">
		
            Mono&lt;String&gt; mono = webClient
                    .get() // GET 请求
                    .uri("/")  // 请求路径
                    .header("Authorization", "Basic ".concat(authorization))
                    .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                    .accept(MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML)
                    .acceptCharset(StandardCharsets.UTF_8)
                    .ifNoneMatch("*")
                    .ifModifiedSince(ZonedDateTime.now())
                    .retrieve() // 获取响应体
                    .bodyToMono(String.class); //响应数据类型转换		
		
		</pre></section><section class="section" id="id1055"><div class="titlepage"><div><div><h3 class="title">同步阻塞等待返回结果</h3></div></div></div><pre class="programlisting">
		
        WebClient webClient = WebClient.create("https://www.netkiller.cn");

        Mono&lt;String&gt; mono = webClient
                .get() // GET 请求
                .uri("/spring/index.html")  // 请求路径
                .retrieve() // 获取响应体
                .bodyToMono(String.class); //响应数据类型转换

        System.out.println(mono.block());		
		
		</pre></section><section class="section" id="id1056"><div class="titlepage"><div><div><h3 class="title">websocket</h3></div></div></div><pre class="programlisting">
			
WebSocketClient client = new ReactorNettyWebSocketClient();
URI url = new URI("ws://localhost:8080/path");
client.execute(url, session -&gt;
        session.receive()
                .doOnNext(System.out::println)
                .then());			
			
		</pre></section><section class="section" id="id1057"><div class="titlepage"><div><div><h3 class="title">同步阻塞等待结果</h3></div></div></div><p>在同步模式下使用WebClient</p><pre class="programlisting">
			
 WebClient client =  WebClient.create("http://www.netkiller.cn");
      String result = client .get()
                .uri("/article/index/arcid/{id}.html", 256)
                .retrieve()
                .bodyToMono(String.class)
                .block();
        System.err.println(result);			
			
		</pre><pre class="programlisting">
		

Person person = client.get().uri("/person/{id}", i).retrieve()
    .bodyToMono(Person.class)
    .block();

List&lt;Person&gt; persons = client.get().uri("/persons").retrieve()
    .bodyToFlux(Person.class)
    .collectList()
    .block();
		
		
		</pre><p>避免单独阻塞每个同步响应</p><pre class="programlisting">
			
      WebClient client =  WebClient.create("http://www.netkiller.cn");
        Mono&lt;String&gt; result1Mono = client .get()
                .uri("/article/index/arcid/{id}.html", 255)
                .retrieve()
                .bodyToMono(String.class);
        Mono&lt;String&gt; result2Mono = client .get()
                .uri("/article/index/arcid/{id}.html", 254)
                .retrieve()
                .bodyToMono(String.class);
        Map&lt;String,String&gt;  map = Mono.zip(result1Mono, result2Mono, (result1, result2) -&gt; {
            Map&lt;String, String&gt; map = new HashMap&lt;&gt;();
            arrayList.put("result1", result1);
            arrayList.put("result2", result2);
            return map;
        }).block();
        System.err.println(map.toString());		
        
		Mono&lt;Person&gt; personMono = client.get().uri("/person/{id}", personId)
		        .retrieve().bodyToMono(Person.class);
		
		Mono&lt;List&lt;Hobby&gt;&gt; hobbiesMono = client.get().uri("/person/{id}/hobbies", personId)
		        .retrieve().bodyToFlux(Hobby.class).collectList();
		
		Map&lt;String, Object&gt; data = Mono.zip(personMono, hobbiesMono, (person, hobbies) -&gt; {
		            Map&lt;String, String&gt; map = new LinkedHashMap&lt;&gt;();
		            map.put("person", person);
		            map.put("hobbies", hobbies);
		            return map;
		        })
		        .block();

			
		</pre></section><section class="section" id="id1058"><div class="titlepage"><div><div><h3 class="title">获取 HTTP 链接状态</h3></div></div></div><pre class="programlisting">
		
			WebClient webClient = WebClient.create("https://www.netkiller.cn");
            Mono&lt;ClientResponse&gt; mono = webClient
                    .get() 
                    .uri("/spring/index.html")
                    .acceptCharset(StandardCharsets.UTF_8)
                    .exchange();

            // 获取完整的响应对象
            ClientResponse response = mono.block();
            
            HttpStatus statusCode = (HttpStatus) response.statusCode(); // 获取响应码
            MultiValueMap&lt;String, ResponseCookie&gt; cookies = response.cookies();
            ClientResponse.Headers headers = response.headers(); // 获取响应头

            // 获取响应体
            Mono&lt;String&gt; resultMono = response.bodyToMono(String.class);
            String body = resultMono.block();

            // 输出结果
            System.out.println("HttpStatus：" + statusCode);
            System.out.println("Cookie：" + cookies.toString());
            System.out.println("Headers：" + headers.asHttpHeaders());
            System.out.println("body：" + body);		
		
		</pre></section><section class="section" id="id1059"><div class="titlepage"><div><div><h3 class="title">Http Base Authentication - 401 Unauthorized</h3></div></div></div><p/><pre class="programlisting">
		
			WebClient client = WebClient.builder()
                    .baseUrl("https://www.netkiller.cn")
                    .defaultHeaders(httpHeaders -&gt; httpHeaders.setBasicAuth("admin", "uPQKFe98bIwZCzgVGjbIQRyRyyecW2Ha"))
//                    .defaultHeaders(httpHeaders -&gt; httpHeaders.setBearerAuth("&lt;bearer token&gt;"))
                    .build();

            Mono&lt;String&gt; response = client.get().uri("/")
                    .retrieve().bodyToMono(String.class);

            log.info(response.block());		
		
		</pre><p/><pre class="programlisting">
		
            WebClient webClient = WebClient.create("https://www.netkiller.cn");
            final String flux = webClient.get()
                    .uri("/")
                    .headers(httpHeaders -&gt; httpHeaders.setBasicAuth("admin", "uPQKFyRyyecbIwZCzgVGjbW2e98IQRHa"))
                    .retrieve()
                    .bodyToMono(String.class)
                    .block();
            System.out.println(flux);		
		
		</pre><p>ExchangeFilterFunctions 方案</p><pre class="programlisting">
		
 		WebClient client = WebClient.builder()
                    .baseUrl("https://www.netkiller.cn")
                    .filter(ExchangeFilterFunctions.basicAuthentication("admin", "uPQcbIwZKFe98IGjbW2QRyRyyeCzgVHa"))
                    .build();

            Mono&lt;String&gt; response = client.get().uri("/")
                    .retrieve().bodyToMono(String.class);
            log.info(response.block());		
		
		</pre></section><section class="section" id="id1060"><div class="titlepage"><div><div><h3 class="title">订阅 SSE</h3></div></div></div><pre class="programlisting">
		
public void consumeServerSentEvent() {
    WebClient client = WebClient.create("https://www.netkiller.cn:8080/sse/server");
    ParameterizedTypeReference&lt;ServerSentEvent&lt;String&gt;&gt; type
     = new ParameterizedTypeReference&lt;ServerSentEvent&lt;String&gt;&gt;() {};

    Flux&lt;ServerSentEvent&lt;String&gt;&gt; eventStream = client.get()
      .uri("/stream")
      .retrieve()
      .bodyToFlux(type);

    eventStream.subscribe(
      content -&gt; logger.info("Time: {} - event: name[{}], id [{}], content[{}] ",
        LocalTime.now(), content.event(), content.id(), content.data()),
      error -&gt; logger.error("Error receiving SSE: {}", error),
      () -&gt; logger.info("Completed!!!"));
}		
		
		</pre><p>同步阻塞等待 SSE 执行完成</p><pre class="programlisting">
		
        List&lt;String&gt; posts = eventStream.collectList().block();
        log.info("结果数：{}, {}" , posts.size(),posts.toString());		
		
		</pre></section><section class="section" id="id1061"><div class="titlepage"><div><div><h3 class="title">打印调试日志</h3></div></div></div><p>.log() 会打印运行期间的所有信息</p><pre class="programlisting">
		
        Flux&lt;String&gt; flux = client.get()
                .uri("/chatgpt/stream?content={content}", prompt)
                .headers(httpHeaders -&gt; httpHeaders.setBasicAuth(username, password))
                .retrieve()
                .bodyToFlux(String.class).log();
		
		</pre></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch42s10.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch42.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch42s12.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">并发 </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> Webflux 安全</td></tr></table></div></footer></body></html>