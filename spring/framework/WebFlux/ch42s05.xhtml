<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Webflux Redis</title><link rel="stylesheet" type="text/css" href="../../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch42s04.xhtml" title="Thymeleaf"/><link rel="next" href="ch42s06.xhtml" title="Webflux Mongdb"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">Webflux Redis</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch42s04.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 42 章 WebFlux framework</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch42s06.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="redis-reactive"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Webflux Redis</h2></div></div></div><section class="section" id="id1017"><div class="titlepage"><div><div><h3 class="title">Maven Redis 依赖</h3></div></div></div><pre class="screen">
			
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-data-redis-reactive&lt;/artifactId&gt;
		&lt;/dependency&gt;
			
		</pre></section><section class="section" id="id1018"><div class="titlepage"><div><div><h3 class="title">Redis 配置</h3></div></div></div><pre class="screen">
			
server:
  port: 8080
spring:
  application:
    name: webflux
  redis:
    host: 127.0.0.1
    port: 6379
    password: pwd2020
    timeout: 5000
    lettuce:
      pool:
        max-active: 200 
        max-idle: 20 
        min-idle: 5 
        max-wait: 1000 			
			
		</pre></section><section class="section" id="id1019"><div class="titlepage"><div><div><h3 class="title">Config</h3></div></div></div><pre class="programlisting">
			
	@Bean
	public ReactiveRedisTemplate&lt;String, String&gt; reactiveRedisTemplate(ReactiveRedisConnectionFactory factory) {
		ReactiveRedisTemplate&lt;String, String&gt; reactiveRedisTemplate = new ReactiveRedisTemplate&lt;&gt;(factory,RedisSerializationContext.string());
		return reactiveRedisTemplate;
	}			
			
		</pre></section><section class="section" id="id1020"><div class="titlepage"><div><div><h3 class="title">Service</h3></div></div></div><pre class="programlisting">
			
@Service
public class RedisServiceImpl implements RedisService {

	@Autowired
	private ReactiveRedisTemplate&lt;String, String&gt; redisTemplate;
	
	@Override
	public Mono&lt;String&gt; get(String key) {
		
		ReactiveValueOperations&lt;String, String&gt; operations = redisTemplate.opsForValue();
		return operations.get(key);
	}

	@Override
	public Mono&lt;String&gt; set(String key,User user) {
		
		ReactiveValueOperations&lt;String, String&gt; operations = redisTemplate.opsForValue();
		return operations.getAndSet(key, JSON.toJSONString(user));
	}

	@Override
	public Mono&lt;Boolean&gt; delete(String key) {
		
		ReactiveValueOperations&lt;String, String&gt; operations = redisTemplate.opsForValue();
		return operations.delete(key);
	}

	@Override
	public Mono&lt;String&gt; update(String key,User user) {
		
		ReactiveValueOperations&lt;String, String&gt; operations = redisTemplate.opsForValue();
		return operations.getAndSet(key, JSON.toJSONString(user));
	}

	@Override
	public Flux&lt;String&gt; all(String key) {
		ReactiveListOperations&lt;String, String&gt; operations = redisTemplate.opsForList();
		return operations.range(key, 0, -1);
	}


	@Override
	public Mono&lt;Long&gt; push(String key,List&lt;String&gt; list) {
		
		ReactiveListOperations&lt;String, String&gt; operations = redisTemplate.opsForList();
		return operations.leftPushAll(key, list);
	}
	
	@Override
	public Flux&lt;String&gt; find(String key) {
		ReactiveValueOperations&lt;String, String&gt; operations = redisTemplate.opsForValue();
		return redisTemplate.keys(key).flatMap(keyId -&gt;operations.get(keyId));
	}
}			
			
		</pre></section><section class="section" id="id1021"><div class="titlepage"><div><div><h3 class="title"/></div></div></div><pre class="programlisting">
			
@RestController
@RequestMapping("/user")
public class UserController {
	
	public final static String USER_KEY="user";
	
	@Autowired
	private RedisService redisService;
	
	@GetMapping("/get/{key}")
	public Mono&lt;String&gt; getUserByKey(@PathVariable("id")String key){
		return redisService.get(key);
	}
	
	@GetMapping("/add")
	public Mono&lt;String&gt; add(User user){
		user = new User();
		user.setAccount("neo");
		user.setPassword("123456");
		user.setNickname("netkiller");
		user.setEmail("netkiller@msn.com");
		user.setPhone("");
		user.setGender(true);
		user.setBirthday("1980-01-30");
		user.setProvince("广东省");
		user.setCity("深圳市");
		user.setCounty("南山区");
		user.setAddress("");
		user.setState("Enabled");

		System.out.println(JSON.toJSONString(user));
		return redisService.set("neo",user);		
	}
	
	@GetMapping("/addlist")
	public Mono&lt;Long&gt; addlist(){
		List&lt;String&gt; list=new ArrayList&lt;String&gt;();
		User user = new User();
		user.setAccount("neo");
		user.setPassword("123456");
		user.setNickname("netkiller");
		user.setEmail("netkiller@msn.com");
		user.setPhone("");
		user.setGender(true);
		user.setBirthday("1980-01-30");
		user.setProvince("广东省");
		user.setCity("深圳市");
		user.setCounty("南山区");
		user.setAddress("");
		user.setState("Enabled");
		
		//添加第一条数据
		list.add(JSON.toJSONString(user));
		//添加第二条数据
		list.add(JSON.toJSONString(user));
		//添加第三条数据
		list.add(JSON.toJSONString(user));
		
		return redisService.addlist("list", list);
	}

	@GetMapping(value="/findAll",produces = MediaType.APPLICATION_STREAM_JSON_VALUE)
	public Flux&lt;String&gt; findAll(){
		return redisService.all("list").delayElements(Duration.ofSeconds(2));
	}
	
	@GetMapping("/getUsers")
	public Flux&lt;String&gt; findUsers() {
		return redisService.find("*").delayElements(Duration.ofSeconds(2));
	}
}			
			
		</pre></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch42s04.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch42.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch42s06.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">Thymeleaf </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> Webflux Mongdb</td></tr></table></div></footer></body></html>