<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>并发</title><link rel="stylesheet" type="text/css" href="../../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch42s09.xhtml" title="SSE"/><link rel="next" href="ch42s11.xhtml" title="WebClient"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">并发</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch42s09.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 42 章 WebFlux framework</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch42s11.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="id4433"><div class="titlepage"><div><div><h2 class="title" style="clear: both">并发</h2></div></div></div><pre class="programlisting">
	
        Flux.just(1, 2, 3, 4, 5, 6, 7, 8)
                .publishOn(Schedulers.parallel())
                .flatMap(integer -&gt; {
                    System.out.println("val:" + integer + ", thread:" + Thread.currentThread().getId());
                    return Mono.just(integer);
                }, 5)
                .repeat()
                .subscribe();	
	
	</pre><pre class="programlisting">
	
    @GetMapping(value = "parallel", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
    public Flux&lt;Integer&gt; parallel() {
        return Flux.just(1, 2, 3, 4, 5, 6, 7, 8)
                .publishOn(Schedulers.parallel())
                .flatMap(integer -&gt; {
                    log.info("val:" + integer + ", thread:" + Thread.currentThread().getId());
                    return Mono.just(integer);
                }, 2).repeat(10L);

    }
	
	</pre><pre class="programlisting">
	
Flux.just(1,2,3,4,5,6,7,8)
    .parallel(2) // mention number of threads
    .runOn(Schedulers.parallel())
    .map(integer -&gt; {
             System.out.println("val:" + integer + ", thread:" + Thread.currentThread().getId()); 
             return integer;
        })   
    .subscribe();	
	
	</pre><pre class="programlisting">
	
package cn.netkiller.test;

import reactor.core.publisher.Flux;
import reactor.core.scheduler.Schedulers;


public class Test {
    public static void main(String[] args) {

        Flux.create(sink -&gt; {
                    sink.next(Thread.currentThread().getName());
                    sink.complete();
                }).publishOn(Schedulers.single())
                .map(x -&gt; String.format("[%s] %s", Thread.currentThread().getName(), x))
                .publishOn(Schedulers.immediate())
                .map(x -&gt; String.format("[%s] %s", Thread.currentThread().getName(), x))
                .subscribeOn(Schedulers.parallel())
                .toStream()
                .forEach(System.out::println);

    }
}
	
	</pre><pre class="programlisting">
	
	
	
	</pre><pre class="programlisting">
	
	
	
	</pre><pre class="programlisting">
	
	
	
	</pre></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch42s09.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch42.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch42s11.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">SSE </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> WebClient</td></tr></table></div></footer></body></html>