<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Webflux Mongdb</title><link rel="stylesheet" type="text/css" href="../../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch42s05.xhtml" title="Webflux Redis"/><link rel="next" href="ch42s07.xhtml" title="Mono"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">Webflux Mongdb</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch42s05.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 42 章 WebFlux framework</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch42s07.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="mongodb-reactive"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Webflux Mongdb</h2></div></div></div><section class="section" id="id1022"><div class="titlepage"><div><div><h3 class="title">Maven 依赖</h3></div></div></div><pre class="screen">
			
	&lt;dependency&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-data-mongodb-reactive&lt;/artifactId&gt;
	&lt;/dependency&gt;			
			
		</pre></section><section class="section" id="id1023"><div class="titlepage"><div><div><h3 class="title">Repository</h3></div></div></div><pre class="programlisting">
			
import org.springframework.data.mongodb.repository.ReactiveMongoRepository;

import cn.netkiller.entity.User;

public interface UserRepository extends ReactiveMongoRepository&lt;User, Long&gt;{

}
			
		</pre></section><section class="section" id="id1024"><div class="titlepage"><div><div><h3 class="title">Service</h3></div></div></div><pre class="screen">
			
@Service
public class MongoServiceImpl implements MongoService {
	
	@Autowired
	private UserRepository userRepository;
	
	@Override
	public Mono&lt;User&gt; getById(Long id) {
		return userRepository.findById(id);
	}

	@Override
	public Mono&lt;User&gt; addUser(User user) {
		return userRepository.save(user);
	}

	@Override
	public Mono&lt;Boolean&gt; deleteById(Long id) {
		 userRepository.deleteById(id);
		 return Mono.create(userMonoSink -&gt; userMonoSink.success());
	}

	@Override
	public Mono&lt;User&gt; updateById(User user) {
		return userRepository.save(user);
	}

	@Override
	public Flux&lt;User&gt; findAllUser() {
		return userRepository.findAll();
	}
}			
			
		</pre></section><section class="section" id="id1025"><div class="titlepage"><div><div><h3 class="title">控制器</h3></div></div></div><pre class="programlisting">
			
@RestController
@RequestMapping("/usermg")
public class UserMongoController {
	
	@Autowired
	private MongoService mongoService;

	@GetMapping("/add")
	public Mono&lt;User&gt; add(User user) {
		user = new User();
		User user = new User();
		user.setAccount("neo");
		user.setPassword("123456");
		user.setNickname("netkiller");
		user.setEmail("netkiller@msn.com");
		user.setPhone("");
		user.setGender(true);
		user.setBirthday("1980-01-30");
		user.setProvince("广东省");
		user.setCity("深圳市");
		user.setCounty("南山区");
		user.setAddress("");
		user.setState("Enabled");
		
	
		System.out.println(JSON.toJSONString(user));
		return mongoService.addUser(user);

	}
	
	/**
	 *	注意这里 produces = MediaType.APPLICATION_STREAM_JSON_VALUE 必须这样设置
	 */
	@GetMapping(value="/findAll",produces = MediaType.APPLICATION_STREAM_JSON_VALUE)
	public Flux&lt;User&gt; findAll(){
		return mongoService.findAllUser().delayElements(Duration.ofSeconds(1));
	}
}
			
		</pre><p>produces
			如果不是application/stream+json则调用端无法滚动得到结果，将一直阻塞等待数据流结束或超时。
		</p></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch42s05.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch42.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch42s07.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">Webflux Redis </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> Mono</td></tr></table></div></footer></body></html>