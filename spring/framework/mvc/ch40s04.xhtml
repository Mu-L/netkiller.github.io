<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>View</title><link rel="stylesheet" type="text/css" href="../../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch40s03.xhtml" title="@RestController"/><link rel="next" href="ch40s05.xhtml" title="校验器(Validator)"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">View</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch40s03.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 40 章 Spring MVC</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch40s05.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="view"><div class="titlepage"><div><div><h2 class="title" style="clear: both">View</h2></div></div></div><section class="section" id="id982"><div class="titlepage"><div><div><h3 class="title">配置静态文件目录</h3></div></div></div><pre class="screen">
		
#静态资源访问路径
spring.mvc.static-path-pattern=/**

#静态资源映射路径
spring.resources.static-locations=classpath:/		
		
		</pre></section><section class="section" id="id983"><div class="titlepage"><div><div><h3 class="title">添加静态文件目录</h3></div></div></div><pre class="programlisting">
		
package cn.netkiller.demo.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class MyWebMvcConfigurer implements WebMvcConfigurer {
    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/images/**").addResourceLocations("classpath:/images/");
    }
}		
		
		</pre></section><section class="section" id="tag"><div class="titlepage"><div><div><h3 class="title">Using Spring’s form tag library</h3></div></div></div><section class="section" id="id987"><div class="titlepage"><div><div><h4 class="title">css</h4></div></div></div><pre class="programlisting">
			
	
			
			</pre><section class="section" id="id984"><div class="titlepage"><div><div><h5 class="title">cssClass</h5></div></div></div><p>cssClass 使用该属性指定表单元素CSS样式名，相当于HTML元素的class属性</p><pre class="programlisting">
				
&lt;form:input path="userName" cssClass="inputStyle"/&gt;
				
				</pre></section><section class="section" id="id985"><div class="titlepage"><div><div><h5 class="title">cssStyle</h5></div></div></div><p>cssStyle 直接通过该属性指定样式，相当于HTML元素的style属性</p><pre class="programlisting">
				
&lt;form:input path="userName" cssStyle="width:100px"/&gt;
				
				</pre></section><section class="section" id="id986"><div class="titlepage"><div><div><h5 class="title">cssErrorClass</h5></div></div></div><p>cssError Class表示表单元素发生错误时对应的样式</p><pre class="programlisting">
				
&lt;form:input path="userName" cssClass="userNameClass" cssErrorClass= "userNameClassError"/&gt;
				
				</pre></section></section><section class="section" id="id988"><div class="titlepage"><div><div><h4 class="title">cssClass</h4></div></div></div><pre class="programlisting">
			
	
			
			</pre></section></section><section class="section" id="thymeleaf"><div class="titlepage"><div><div><h3 class="title">Thymeleaf</h3></div></div></div><p>http://thymeleaf.org/</p><section class="section" id="id989"><div class="titlepage"><div><div><h4 class="title">Maven pom.xml</h4></div></div></div><pre class="programlisting">
			
			&lt;dependency&gt;  
	            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  
	            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;  
	        &lt;/dependency&gt;  		
			
			</pre></section><section class="section" id="id990"><div class="titlepage"><div><div><h4 class="title">Spring 配置</h4></div></div></div><pre class="programlisting">
			
	&lt;!-- **************************************************************** --&gt;
	&lt;!-- THYMELEAF-SPECIFIC ARTIFACTS --&gt;
	&lt;!-- TemplateResolver &lt;- TemplateEngine &lt;- ViewResolver --&gt;
	&lt;!-- **************************************************************** --&gt;

	&lt;bean id="templateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver"&gt;
		&lt;property name="prefix" value="/WEB-INF/templates/" /&gt;
		&lt;property name="suffix" value=".html" /&gt;
		&lt;property name="templateMode" value="HTML5" /&gt;
	&lt;/bean&gt;

	&lt;bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine"&gt;
		&lt;property name="templateResolver" ref="templateResolver" /&gt;
	&lt;/bean&gt;

	&lt;bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver"&gt;
		&lt;property name="templateEngine" ref="templateEngine" /&gt;
	&lt;/bean&gt;	
			
			</pre></section><section class="section" id="id991"><div class="titlepage"><div><div><h4 class="title">controller</h4></div></div></div><pre class="programlisting">
			
package cn.netkiller.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
@RequestMapping("/")
public class HelloController {

	@RequestMapping(value = "/{name}", method = RequestMethod.GET)
	public String getMovie(@PathVariable String name, ModelMap model) {
		model.addAttribute("name", name);
		return "hello";
	}

}			
			
			</pre></section><section class="section" id="id992"><div class="titlepage"><div><div><h4 class="title">HTML5 Template</h4></div></div></div><pre class="programlisting">
			
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8" /&gt;
&lt;title&gt;Spring MVC + Thymeleaf Example&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	Hello, &lt;span th:text="${name}" /&gt;!
&lt;/body&gt;
&lt;/html&gt;
			
			</pre></section><section class="section" id="thymeleaf.table"><div class="titlepage"><div><div><h4 class="title">thymeleaf 渲染表格</h4></div></div></div><pre class="programlisting">
			
	@RequestMapping("/list")
	public ModelAndView list() {

		Iterable&lt;User&gt; users = userRepository.findAll();

		ModelAndView mv = new ModelAndView();
		mv.addObject("users", users);
		mv.setViewName("table");
		return mv;
	}			
			
			</pre><p>模板文件</p><pre class="programlisting">
			
&lt;!DOCTYPE html&gt;
&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt;
&lt;head&gt;
&lt;meta charset="UTF-8" /&gt;
&lt;title&gt;用户登记&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;Welcome to Thymeleaf&lt;/h1&gt;
	&lt;table border="1" width="100%"&gt;
		&lt;tr&gt;
			&lt;td&gt;ID&lt;/td&gt;
			&lt;td&gt;姓名&lt;/td&gt;
			&lt;td&gt;联系方式&lt;/td&gt;
			&lt;td&gt;详细地址&lt;/td&gt;
			&lt;td&gt;图片&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr th:each="user : ${users}"&gt;
			&lt;td th:text="${user.id}"&gt;&lt;/td&gt;
			&lt;td th:text="${user.name}"&gt;&lt;/td&gt;
			&lt;td th:text="${user.tel}"&gt;&lt;/td&gt;
			&lt;td th:text="${user.address}"&gt;&lt;/td&gt;
			&lt;td th:text="${user.picture}"&gt;&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;			
			
			</pre></section><section class="section" id="thymeleaf.url"><div class="titlepage"><div><div><h4 class="title">URL 链接</h4></div></div></div><pre class="programlisting">
			
	&lt;span th:text="${number+1}"&gt;&lt;/span&gt; /
	&lt;span th:text="${totalPages}"&gt;&lt;/span&gt;

	&lt;a href="#"
		th:href="@{/api/user/browse?sort=id,desc&amp;size=10(page=${number-1})}"&gt;上一页&lt;/a&gt;
	&lt;a href="#"
		th:href="@{/api/user/browse?sort=id,desc&amp;size=10(page=${number+1})}"&gt;下一页&lt;/a&gt;			
			
			</pre><p>拼接 URL 的方法</p><pre class="programlisting">
			
&lt;img src="#" th:src="${'https://img.netkiller.cn/' + pic}" height="128" th:target="_blank" /&gt;			
			
			</pre></section><section class="section" id="strings.arraySplit"><div class="titlepage"><div><div><h4 class="title">拆分字符串</h4></div></div></div><p>pictures 是一个以逗号分割得字符串。我们需要拆分并逐条显示。</p><pre class="programlisting">
			
	&lt;div th:unless="${picture == null}"&gt;
		&lt;a th:each="pic : ${#strings.arraySplit(pictures, ',')}" href="#" th:href="${pic}"&gt; &lt;img src="#" th:src="${pic}" height="64" /&gt;&lt;/a&gt;
	&lt;/div&gt;			
			
			</pre></section><section class="section" id=""><div class="titlepage"><div><div><h4 class="title">日期格式化</h4></div></div></div><pre class="programlisting">
			
	&lt;span th:text="${#dates.format(createDate, 'yyyy-MM-dd HH:mm')}"&gt;&lt;/span	
			
			</pre><pre class="screen">
			

// java.util.Date 处理

${#dates.day(date)}
${#dates.month(date)}
${#dates.monthName(date)}
${#dates.monthNameShort(date)}
${#dates.year(date)}
${#dates.dayOfWeek(date)}
${#dates.dayOfWeekName(date)}
${#dates.dayOfWeekNameShort(date)}
${#dates.hour(date)}
${#dates.minute(date)}
${#dates.second(date)}
${#dates.millisecond(date)}


// java.time 时间处理
${#temporals.day(date)}
${#temporals.month(date)}
${#temporals.monthName(date)}
${#temporals.monthNameShort(date)}
${#temporals.year(date)}
${#temporals.dayOfWeek(date)}
${#temporals.dayOfWeekName(date)}
${#temporals.dayOfWeekNameShort(date)}
${#temporals.hour(date)}
${#temporals.minute(date)}
${#temporals.second(date)}
${#temporals.millisecond(date)}

// 处理天实例

&lt;p th:text="${#dates.day(standardDate)}"&gt;&lt;/p&gt;
&lt;p th:text="${#temporals.day(localDateTime)}"&gt;&lt;/p&gt;
&lt;p th:text="${#temporals.day(localDate)}"&gt;&lt;/p&gt;

// 处理周实例

&lt;p th:text="${#dates.dayOfWeekName(standardDate)}"&gt;&lt;/p&gt;
&lt;p th:text="${#temporals.dayOfWeekName(localDateTime)}"&gt;&lt;/p&gt;
&lt;p th:text="${#temporals.dayOfWeekName(localDate)}"&gt;&lt;/p&gt;

// 处理秒实例

&lt;p th:text="${#dates.second(standardDate)}"&gt;&lt;/p&gt;
&lt;p th:text="${#temporals.second(localDateTime)}"&gt;&lt;/p&gt;			
			
			</pre></section></section><section class="section" id="freemarker"><div class="titlepage"><div><div><h3 class="title">FreeMarker</h3></div></div></div><p>http://freemarker.org/</p></section><section class="section" id="spring.mvc.i18n"><div class="titlepage"><div><div><h3 class="title">i18n 国际化</h3></div></div></div><section class="section" id="id993"><div class="titlepage"><div><div><h4 class="title">在 appliction.properties 中配置启用 i18n</h4></div></div></div><pre class="screen">
			
spring.messages.basename=message
spring.messages.encoding=UTF-8
			
			</pre></section><section class="section" id="id994"><div class="titlepage"><div><div><h4 class="title">创建语言包文件</h4></div></div></div><p>创建默认语言包文件 message.properties，当匹配不到语言时使用默认配置</p><pre class="screen">
			
member.name=Name
			
			</pre><p>message_en_US.properties</p><pre class="screen">
			
member.name=Name
			
			</pre><p>message_zh_CN.properties</p><pre class="screen">
			
member.name=姓名
			
			</pre><p>注意：Eclipse 需要安装 properties 编辑工具，否则中文会自动转换成UTF8编码，无法直接阅读。</p></section><section class="section" id="id995"><div class="titlepage"><div><div><h4 class="title">控制器重引用语言包</h4></div></div></div><p>RestController</p><pre class="programlisting">
			
@RestController
public class HomeController {
	@Autowired
	private MessageSource messageSource;

	@GetMapping("/lang")
	public String language() {
		String message = messageSource.getMessage("member.name", null, LocaleContextHolder.getLocale());
		return message;
	}
}
			
			</pre><p>Controller</p><pre class="programlisting">
			
package cn.netkiller.controller;

import org.springframework.stereotype.Controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.context.MessageSource;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.ui.Model;
import java.util.Locale;

@Controller
public class HomeController {

    @Autowired
    private MessageSource messageSource;

    @RequestMapping(value = "/", method = RequestMethod.GET)
    public String index(Locale locale, Model model){

        // add parametrized message from controller
        String welcome = messageSource.getMessage("welcome.message", new Object[]{"Neo Chan"}, locale);
        model.addAttribute("message", welcome);
        
        // obtain locale from LocaleContextHolder
        Locale currentLocale = LocaleContextHolder.getLocale();
        model.addAttribute("locale", currentLocale);
        model.addAttribute("startMeeting", "10:30");
        
        return "index";
    }

}			
			
			</pre></section><section class="section" id="id996"><div class="titlepage"><div><div><h4 class="title">参数传递</h4></div></div></div><p>有时定义语言包会出现一种情况，一个句子中可能存在变量。例如：</p><p>恭喜你 XXXX 您已成为我们的会员</p><p>这样的需求，如果丁一两个key处理起来会非常麻烦。这里可以定义一个变量，通过参数传递来修改一句话中间的部分。</p><pre class="screen">
			
welcome=Welcom to {0}
			
			</pre><pre class="screen">
			
	@GetMapping("/lang/args")
	public String welcome() {
		String[] args = { "China" };
		String message = messageSource.getMessage("welcome", args, LocaleContextHolder.getLocale());

		return message;
	}
			
			</pre><p>参数以此类推 {0}, {1} ...... {n}</p><pre class="screen">
			
String welcome = messageSource.getMessage("welcome.message", new Object[]{"Neo chen"}, locale);			
			
			</pre></section></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch40s03.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch40.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch40s05.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">@RestController </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> 校验器(Validator)</td></tr></table></div></footer></body></html>