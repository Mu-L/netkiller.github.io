<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>第 40 章 Spring MVC</title><link rel="stylesheet" type="text/css" href="../../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="../pt02.xhtml" title="部分 II. Spring Framework"/><link rel="next" href="ch40s02.xhtml" title="@Controller"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">第 40 章 Spring MVC</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="../pt02.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">部分 II. Spring Framework</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch40s02.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="chapter" id="index"><div class="titlepage"><div><div><h2 class="title">第 40 章 Spring MVC</h2></div></div></div><div class="toc"><div class="toc-title">目录</div><ul class="toc"><li><span class="section"><a href="ch40.xhtml#@EnableWebMvc">@EnableWebMvc</a></span><ul><li><span class="section"><a href="ch40.xhtml#cors">CORS 跨域请求</a></span></li><li><span class="section"><a href="ch40.xhtml#id934">Spring MVC CORS with WebMvcConfigurerAdapter</a></span></li></ul></li><li><span class="section"><a href="ch40s02.xhtml">@Controller</a></span><ul><li><span class="section"><a href="ch40s02.xhtml#@RequestMapping">@RequestMapping</a></span></li><li><span class="section"><a href="ch40s02.xhtml#@GetMapping">@GetMapping</a></span></li><li><span class="section"><a href="ch40s02.xhtml#@PostMapping">@PostMapping</a></span></li><li><span class="section"><a href="ch40s02.xhtml#@RequestBody">@RequestBody</a></span></li><li><span class="section"><a href="ch40s02.xhtml#@RequestParam">RequestMapping with Request Parameters - @RequestParam</a></span></li><li><span class="section"><a href="ch40s02.xhtml#@RequestHeader">@RequestHeader - 获取 HTTP Header 信息</a></span></li><li><span class="section"><a href="ch40s02.xhtml#@PathVariable">RequestMapping with Path Variables - @PathVariable</a></span></li><li><span class="section"><a href="ch40s02.xhtml#@MatrixVariable">@MatrixVariable注解，RFC3986定义URI的路径(Path)中可包含name-value片段</a></span></li><li><span class="section"><a href="ch40s02.xhtml#@ModelAttribute">@ModelAttribute</a></span></li><li><span class="section"><a href="ch40s02.xhtml#@ResponseBody">@ResponseBody</a></span></li><li><span class="section"><a href="ch40s02.xhtml#@ResponseStatus">@ResponseStatus 设置 HTTP 状态</a></span></li><li><span class="section"><a href="ch40s02.xhtml#@CrossOrigin">@CrossOrigin</a></span></li><li><span class="section"><a href="ch40s02.xhtml#@CookieValue">@CookieValue - 获取 Cookie 值</a></span></li><li><span class="section"><a href="ch40s02.xhtml#@SessionAttributes">@SessionAttributes</a></span></li><li><span class="section"><a href="ch40s02.xhtml#ModelAndView">ModelAndView</a></span></li><li><span class="section"><a href="ch40s02.xhtml#http">HttpServletRequest / HttpServletResponse </a></span></li><li><span class="section"><a href="ch40s02.xhtml#StreamingResponseBody">StreamingResponseBody 输出 Raw Data</a></span></li></ul></li><li><span class="section"><a href="ch40s03.xhtml">@RestController</a></span><ul><li><span class="section"><a href="ch40s03.xhtml#id966">上传文件</a></span></li><li><span class="section"><a href="ch40s03.xhtml#id967">返回实体</a></span></li><li><span class="section"><a href="ch40s03.xhtml#id968">JSON</a></span></li><li><span class="section"><a href="ch40s03.xhtml#restfull.raw.json">处理原始 RAW JSON 数据</a></span></li><li><span class="section"><a href="ch40s03.xhtml#json.null">返回 JSON 对象 NULL 专为 "" 字符串</a></span></li><li><span class="section"><a href="ch40s03.xhtml#restful.xml">XML</a></span></li><li><span class="section"><a href="ch40s03.xhtml#restful.json">兼容传统 json 接口</a></span></li><li><span class="section"><a href="ch40s03.xhtml#restful.upload">上传文件</a></span></li><li><span class="section"><a href="ch40s03.xhtml#export.csv">Spring boot with csv</a></span></li><li><span class="section"><a href="ch40s03.xhtml#json">Json 处理</a></span></li><li><span class="section"><a href="ch40s03.xhtml#rest.synchronized">synchronized</a></span></li><li><span class="section"><a href="ch40s03.xhtml#spring.mvc.sse">SSE Streaming in Spring MVC</a></span></li></ul></li><li><span class="section"><a href="ch40s04.xhtml">View</a></span><ul><li><span class="section"><a href="ch40s04.xhtml#id982">配置静态文件目录</a></span></li><li><span class="section"><a href="ch40s04.xhtml#id983">添加静态文件目录</a></span></li><li><span class="section"><a href="ch40s04.xhtml#tag">Using Spring’s form tag library</a></span></li><li><span class="section"><a href="ch40s04.xhtml#thymeleaf">Thymeleaf</a></span></li><li><span class="section"><a href="ch40s04.xhtml#freemarker">FreeMarker</a></span></li><li><span class="section"><a href="ch40s04.xhtml#spring.mvc.i18n">i18n 国际化</a></span></li></ul></li><li><span class="section"><a href="ch40s05.xhtml">校验器(Validator)</a></span><ul><li><span class="section"><a href="ch40s05.xhtml#id1000">常规用法</a></span></li><li><span class="section"><a href="ch40s05.xhtml#id1005">自定义注解</a></span></li></ul></li><li><span class="section"><a href="ch40s06.xhtml">Interceptor/Filter 拦截器/过滤</a></span><ul><li><span class="section"><a href="ch40s06.xhtml#interceptor.session">Session 拦截</a></span></li><li><span class="section"><a href="ch40s06.xhtml#interceptor.token">Token 拦截</a></span></li><li><span class="section"><a href="ch40s06.xhtml#Filter">过滤器</a></span></li><li><span class="section"><a href="ch40s06.xhtml#id1006">拦截器获取PathVariable变量</a></span></li></ul></li></ul></div><p>Spring MVC 有两种启动模式，一种是传统Tomcat，需要配置很多XML文件。另一种方式是采用 Spring Boot 需要些一个Java程序，不需要写xml文件，这个程序会帮助你处理启动所需的一切，并且采用嵌入方式启动 Tomcat 或者 Jetty.</p><p>两种方式各有优缺点，Tomcat 方式配置繁琐，但是可以使用虚拟机，同一个IP地址使用不同域名访问，出现不同的内容。而Spring Boot一个应用一个容器一个端口，比不得不通过端口来区分应用。</p><section class="section" id="@EnableWebMvc"><div class="titlepage"><div><div><h2 class="title" style="clear: both">@EnableWebMvc</h2></div></div></div><pre class="programlisting">
		
package cn.netkiller.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

@Configuration
@EnableWebMvc
public class WebMvcConfig extends WebMvcConfigurerAdapter {

	@Override
	public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
		configurer.enable();
	}

	@Bean
	public InternalResourceViewResolver viewResolver() {
		InternalResourceViewResolver resolver = new InternalResourceViewResolver();
		resolver.setPrefix("WEB-INF/jsp/");
		resolver.setSuffix(".jsp");
		return resolver;
	}

}
		
	</pre><section class="section" id="cors"><div class="titlepage"><div><div><h3 class="title">CORS 跨域请求</h3></div></div></div><pre class="programlisting">
			
@Configuration
public class CorsConfiguration
{
    @Bean
    public WebMvcConfigurer corsConfigurer()
    {
        return new WebMvcConfigurerAdapter() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**");
            }
        };
    }
}		
			
		</pre><pre class="programlisting">
			
 	@Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurerAdapter() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**").allowedOrigins("*");
            }
        };
    }			
			
		</pre></section><section class="section" id="id934"><div class="titlepage"><div><div><h3 class="title">Spring MVC CORS with WebMvcConfigurerAdapter</h3></div></div></div><pre class="programlisting">
			
@Configuration
@EnableWebMvc
public class CorsConfiguration extends WebMvcConfigurerAdapter
{
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**").allowedMethods("GET", "POST");
    }
}
			
		</pre><pre class="programlisting">
			
@Configuration
@EnableWebMvc
public class AppConfig extends WebMvcConfigurerAdapter {
	@Override
	public void addCorsMappings(CorsRegistry registry) {
	  registry.addMapping("/info/**")
	   	  .allowedOrigins("http://localhost:8080", "http://localhost:8000")
		  .allowedMethods("POST", "GET",  "PUT", "OPTIONS", "DELETE")
		  .allowedHeaders("X-Auth-Token", "Content-Type")
		  .exposedHeaders("custom-header1", "custom-header2")
		  .allowCredentials(false)
		  .maxAge(4800);
	}
}			
			
		</pre></section></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="../pt02.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="../pt02.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch40s02.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">部分 II. Spring Framework </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> @Controller</td></tr></table></div></footer></body></html>