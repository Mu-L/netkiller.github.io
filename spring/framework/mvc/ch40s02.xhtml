<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>@Controller</title><link rel="stylesheet" type="text/css" href="../../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch40.xhtml" title="第 40 章 Spring MVC"/><link rel="next" href="ch40s03.xhtml" title="@RestController"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">@Controller</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch40.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 40 章 Spring MVC</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch40s03.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="Controller"><div class="titlepage"><div><div><h2 class="title" style="clear: both">@Controller</h2></div></div></div><pre class="programlisting">
	
package cn.netkiller.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class Welcome {

	@RequestMapping("/welcome")
	public ModelAndView helloWorld() {
		String message = "Helloworld!!!";
		return new ModelAndView("welcome", "message", message);
	}
}
		
	</pre><section class="section" id="@RequestMapping"><div class="titlepage"><div><div><h3 class="title">@RequestMapping</h3></div></div></div><pre class="programlisting">
		
@RequestMapping("/welcome")		
		
		</pre><pre class="programlisting">
		
@RequestMapping(value = "/list", method =
RequestMethod.GET)		
		
		</pre><section class="section" id="id935"><div class="titlepage"><div><div><h4 class="title">@RequestMapping("/")</h4></div></div></div><pre class="programlisting">
			
package com.cf88.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
@RequestMapping("/")
public class HelloController {

	@RequestMapping(value = "/{name}", method = RequestMethod.GET)
	public String getMovie(@PathVariable String name, ModelMap model) {
		model.addAttribute("name", name);
		return "hello";
	}

}		
			
			</pre><p>同时支持多种操作方法</p><pre class="programlisting">
			
	@RequestMapping(value = "/name", method = { RequestMethod.GET, RequestMethod.POST })			
			
			</pre></section><section class="section" id="id936"><div class="titlepage"><div><div><h4 class="title">映射多个URL</h4></div></div></div><pre class="programlisting">
			
@RequestMapping({ "/news/zh-cn", "/news/zh-tw" })
@ResponseBody
public String getNewsByPath() {
	return "Hello";
}			
			

			</pre></section><section class="section" id="id937"><div class="titlepage"><div><div><h4 class="title">匹配通配符</h4></div></div></div><pre class="programlisting">
			
@Controller
@RequestMapping("/test/*")

public class TestController {

	@RequestMapping
	public String default() {
		return "OK";
	}
}
			
			</pre></section><section class="section" id="id938"><div class="titlepage"><div><div><h4 class="title">headers</h4></div></div></div><pre class="programlisting">
			
@RequestMapping(value = "/news/json", method = GET, headers = "Accept=application/json")
@ResponseBody
public String getFoosAsJsonFromBrowser() {
    return "{...}";
}
			
			</pre><pre class="screen">
			
curl -H "Accept:application/json,text/html"
http://localhost:8080/spring/news/json.html			
			
			</pre></section></section><section class="section" id="@GetMapping"><div class="titlepage"><div><div><h3 class="title">@GetMapping</h3></div></div></div><p>@GetMapping 等效与 @RequestMapping</p><pre class="programlisting">
			
@RequestMapping(value = "/news/list", method = GET)			
			
		</pre><p>范例</p><pre class="programlisting">
			
import org.springframework.web.bind.annotation.GetMapping;

	@GetMapping("/finance/list")
	public String financeList() {
		return financeService.financeList();
	}
			
		</pre><pre class="programlisting">
			
@GetMapping(value = "/user",produces = MediaType.APPLICATION_JSON_UTF8_VALUE)			
			
		</pre></section><section class="section" id="@PostMapping"><div class="titlepage"><div><div><h3 class="title">@PostMapping</h3></div></div></div><p>@GetMapping 等效与 @RequestMapping</p><pre class="programlisting">
			
@RequestMapping(value = "/news/list", method = RequestMethod.POST)			
			
		</pre><p>范例</p><pre class="programlisting">
			
import org.springframework.web.bind.annotation.PostMapping;

	@PostMapping("/finance/list")
	public String financeList() {
		return financeService.financeList();
	}			
			
		</pre><p>Content-Type: multipart/form-data</p><pre class="programlisting">
			
@PostMapping(path = "/upload", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)			
			
		</pre></section><section class="section" id="@RequestBody"><div class="titlepage"><div><div><h3 class="title">@RequestBody</h3></div></div></div><section class="section" id="id939"><div class="titlepage"><div><div><h4 class="title">原始数据</h4></div></div></div><p>处理 raw 原始数据，例如提交的时 application/json, application/xml等</p><pre class="programlisting">
		
@RequestMapping(value = "/something", method = RequestMethod.PUT)  
public void handle(@RequestBody String body, Writer writer) throws IOException {  
	writer.write(body);  
} 
		
			</pre></section><section class="section" id="@RequestBody.List"><div class="titlepage"><div><div><h4 class="title">@RequestBody 传递 List</h4></div></div></div><pre class="programlisting">
			
package cn.netkiller.api.restful;

import java.util.List;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class TestRestController {

	@RequestMapping(value = "/test/list/{siteId}", method = RequestMethod.POST)
	public List&lt;String&gt; ping(@PathVariable("siteId") int siteId, @RequestBody List&lt;String&gt; tags) {
		System.out.println(String.format("%d, %s", siteId, tags));
		return (tags);
	}

}
			
			</pre><pre class="programlisting">
			
$ curl -H "Content-Type: application/json" -X POST -d '["Neo","Netkiller"]' http://localhost:8440/test/list/22.json 

["Neo","Netkiller"]	
			
			</pre></section><section class="section" id="RequestBody.Map"><div class="titlepage"><div><div><h4 class="title">传递 Map 数据</h4></div></div></div><pre class="programlisting">
			
	@PostMapping("/finance/list")
	public String financeList(@RequestBody Map&lt;String,String&gt; map) {
		return financeService.financeList(map);
	}
			
			</pre><pre class="programlisting">
			
% curl -H "Content-Type: application/json" -X POST -d '{"date":"2017-11-08"}' http://localhost:8440/finance/list.json			
			
			</pre></section><section class="section" id="id940"><div class="titlepage"><div><div><h4 class="title">获取 JSONObject 数据</h4></div></div></div><pre class="programlisting">
				
    @PostMapping(value = "/{device}/post")
    public Mono&lt;String&gt; post(@PathVariable String device, @RequestBody JSONObject jsonObject) {
        log.info(jsonObject.toString());
        return Mono.just(jsonObject.toString());
    }				
				
			</pre></section></section><section class="section" id="@RequestParam"><div class="titlepage"><div><div><h3 class="title">RequestMapping with Request Parameters - @RequestParam</h3></div></div></div><p>@RequestParam 用来处理 HTTP GET/POST 请求的变量</p><pre class="programlisting">
			import
			org.springframework.web.bind.annotation.RequestParam;
		</pre><section class="section" id="id941"><div class="titlepage"><div><div><h4 class="title">HTTP GET</h4></div></div></div><pre class="programlisting">
			
	@RequestMapping("/request/param")
	@ResponseBody
	public String getBarBySimplePathWithRequestParam(@RequestParam("id") long id) {
	    return "Get a specific Bar with id=" + id;
	}
			
			</pre><p/><pre class="screen">
				
http://localhost:8080/Spring/request/param.html?id=100				
				
			</pre></section><section class="section" id="id942"><div class="titlepage"><div><div><h4 class="title">HTTP POST</h4></div></div></div><pre class="programlisting">
			
package cn.netkiller.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class Http {

	@RequestMapping("/http/form")
	public ModelAndView createCustomer(){
		ModelMap model = new ModelMap();

		model.addAttribute("email", "netkiller@msn.com");
		model.addAttribute("phone", "13113668890");

	    return new ModelAndView("http/form", model);
	}

	@RequestMapping(value= "/http/post", method = RequestMethod.POST)
	public ModelAndView saveCustomer(HttpServletRequest request,
	        @RequestParam(value="Email", required=false) String email,
	        @RequestParam(value="Password", required=false) String password,
	        @RequestParam(value="Phone", required=false) String phone){

		ModelMap model = new ModelMap();

		model.addAttribute("email", email);
		model.addAttribute("password", password);
		model.addAttribute("phone", phone);

	    return new ModelAndView("http/post", model);
	}

}
			
			</pre><p>http/form.jsp</p><pre class="programlisting">
			
&lt;%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

	&lt;form method="POST"
		action="http://localhost:8080/Spring/http/post.html" id="Register"
		name="Register"&gt;
		Email: &lt;input class="register" type="text" id="Email" name="Email" value="${email}" /&gt; &lt;br /&gt;
		Password： &lt;input class="register" type="password" id="Password" name="Password" value="" /&gt;&lt;br /&gt;
		Phone： &lt;input class="register" type="text" id="Phone" name="Phone" value="${phone}" /&gt; &lt;br /&gt;
		&lt;input type="submit" id="btnRegister" name="btnRegister" value="Register" style="cursor: pointer" /&gt;
	&lt;/form&gt;

&lt;/body&gt;
&lt;/html&gt;
			
			</pre><p>http/post.jsp</p><pre class="programlisting">
			
&lt;%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	${email}&lt;br&gt;
	${password}	&lt;br&gt;
	${phone} &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
			
			</pre></section><section class="section" id="id943"><div class="titlepage"><div><div><h4 class="title">@RequestParam 传递特殊字符串</h4></div></div></div><p>URL 中 “+” 有特殊意义，表示空格。</p><p>如果 @RequestParam 传递参数含有空格可以这样处理。</p><pre class="programlisting">
			
	@RequestMapping("/RequestParam")
	@ResponseBody
	public String query(@RequestParam("code") String code) {

		return code.replace(" ", "+");

	}
			
			</pre></section><section class="section" id="id944"><div class="titlepage"><div><div><h4 class="title">传递日期参数</h4></div></div></div><pre class="programlisting">
			
	@RequestMapping("/range")
	public ModelAndView range(@RequestParam("beginDate") @DateTimeFormat(pattern = "yyyy-MM-dd") Date beginDate, @RequestParam("endDate") @DateTimeFormat(pattern = "yyyy-MM-dd") Date endDate) {
		log.info("===== Begin ===== {}", beginDate);

		// 你的逻辑

		log.info("===== End ===== {}", endDate);
		return new ModelAndView("activity/index", "message", "操作成功");
	}
			
			</pre></section><section class="section" id="id945"><div class="titlepage"><div><div><h4 class="title">上传文件</h4></div></div></div><pre class="programlisting">
			
package cn.netkiller.restful;

import java.io.IOException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/upload")
public class UploadRestController {

	private static final Logger logger = LoggerFactory.getLogger(UploadRestController.class);

	public UploadRestController() {
		// TODO Auto-generated constructor stub
	}

	@PostMapping("/add")
	public String fileUpload(@RequestParam("file") MultipartFile multipartFile) throws IOException {

		String name = multipartFile.getOriginalFilename();
		System.out.println("File name: " + name);
		// todo save to a file via multipartFile.getInputStream()
		byte[] bytes = multipartFile.getBytes();
		System.out.println("File uploaded content:\n" + new String(bytes));
		return "file uploaded";
	}

}
			
			</pre><p>操作演示，首先创建一个文件</p><pre class="screen">
			
echo "Helloworld!!!" &gt; hello.txt
			
			</pre><p>上传该文件</p><pre class="screen">
			
neo@MacBook-Pro /tmp % curl "http://localhost:8080/upload/add" \                           
    -X POST \
    -H "Content-Type: multipart/form-data" \
    -F file=@"hello.txt"

file uploaded
			
			</pre></section><section class="section" id="id946"><div class="titlepage"><div><div><h4 class="title">@RequestParam - POST 数组</h4></div></div></div><p>HTTP 头</p><pre class="screen">
			
picture[]: gather/293a93baa02cb18a840631bac1f9eeb20b7d436f.jpeg
picture[]: gather/be7572e4df527b4389d605766ea65aafcf2d822a.jpg			
			
			</pre><pre class="programlisting">
			
	@PostMapping("/save")
	public String save(@RequestParam(value = "picture[]", required = true) String[] picture) {
		return String.join(",", picture);
	}			
			
			</pre></section><section class="section" id="id947"><div class="titlepage"><div><div><h4 class="title">默认值</h4></div></div></div><pre class="programlisting">
			
@RequestParam(name = "name", defaultValue = "xxx") String name			
			
			</pre></section><section class="section" id="id948"><div class="titlepage"><div><div><h4 class="title">是否非必须</h4></div></div></div><p>使用 required = false 标注参数是非必须的</p><pre class="programlisting">
			
@RequestParam(name = "age", required = false) Integer age			
			
			</pre></section><section class="section" id="id949"><div class="titlepage"><div><div><h4 class="title">用 Map 接收 From 数据</h4></div></div></div><pre class="programlisting">
			
    @PostMapping("/token")
    @ResponseBody
    public String token(@RequestParam Map&lt;String, String&gt; params) {
        log.debug(params.toString());
        String token = jwtTokeComponent.getTestToken(params.get("appId"), params.get("appKey"), params.get("subject"), params.get("audience"));
        return token;
    }			
			
			</pre></section></section><section class="section" id="@RequestHeader"><div class="titlepage"><div><div><h3 class="title">@RequestHeader - 获取 HTTP Header 信息</h3></div></div></div><pre class="programlisting">
		
@RequestMapping("/displayHeaderInfo")  
public void displayHeaderInfo(@RequestHeader("Accept-Encoding") String encoding,  
                              @RequestHeader("Keep-Alive") long keepAlive)  {  
  
  //...  
  
} 
		
		</pre><p>获取用户当前语言</p><pre class="programlisting">
		
	@GetMapping("/lang")
	public String language(@RequestHeader("Accept-Language") String locale ) {
		System.out.println(locale);
		return locale;
	}				
		
		</pre><p>下面代码可以获得相同效果</p><pre class="programlisting">
		
	@GetMapping("/lang")
	public String language(Locale locale) {
		System.out.println(locale);
		return locale;
	}	
	
	@GetMapping("/lang")
	public String language() {
		String locale = LocaleContextHolder.getLocale().toString();
		System.out.println(locale);
		return locale;
	}
		
		</pre><section class="section" id="id950"><div class="titlepage"><div><div><h4 class="title">@RequestHeader 从 Http 头中获取变量</h4></div></div></div><pre class="programlisting">
			
	@PostMapping(value = "/token")
	public TokenResponse token(@RequestParam String symbol, @RequestHeader String token) {
	
			TokenResponse tokenResponse = walletService.getTokenBySymbol(symbol);

			return tokenResponse;
	}
			
			</pre></section></section><section class="section" id="@PathVariable"><div class="titlepage"><div><div><h3 class="title">RequestMapping with Path Variables - @PathVariable</h3></div></div></div><p>PATHINFO 变量可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。</p><section class="section" id="id951"><div class="titlepage"><div><div><h4 class="title">URL 参数传递</h4></div></div></div><p>需求，我们需要通过URL传递参数，所传递的值是分类ID与文章ID，例如 /news/1.html,
				/news/1/1.html。
			</p><pre class="programlisting">
			
package cn.netkiller.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class Pathinfo {
	@RequestMapping("/pathinfo/{id}")
	public ModelAndView urlTestId(@PathVariable String id) {

		return new ModelAndView("pathinfo/param", "id", id);
	}

	@RequestMapping("/pathinfo/{cid}/{id}")
	public ModelAndView urlTestId(@PathVariable String cid, @PathVariable String id) {

		ModelMap model = new ModelMap();

		model.addAttribute("cid", cid);
		model.addAttribute("id", id);

		return new ModelAndView("pathinfo/param", model);
	}
}
			
			</pre><p>jsp测试文件</p><pre class="programlisting">
			
&lt;%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
${ cid } &lt;br&gt;
${ id } &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
			
			</pre></section><section class="section" id="id952"><div class="titlepage"><div><div><h4 class="title">默认值</h4></div></div></div><p>required 设置参数不是必须的</p><pre class="programlisting">
			
@PathVariable(required = false) String id			
			
			</pre><p>设置多个映射</p><pre class="programlisting">
			
@RequestMapping(value = {"/organization/{pageNumber}", "/organization"} , method = RequestMethod.GET)
public String list(@PathVariable(required = false) Integer pageNumber, ModelMap modelMap){
...
}			
			
			</pre></section><section class="section" id="id953"><div class="titlepage"><div><div><h4 class="title">URL 传递 Date 类型</h4></div></div></div><p>http://localhost:7000/history/2016-09-28%2000:00:00/</p><pre class="programlisting">
			
	@RequestMapping("/history/{datetime}")
	public String history(@PathVariable @DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss") Date datetime) throws Exception {

		System.out.println(datetime)

		return null;
	}			
			
			</pre></section><section class="section" id="id954"><div class="titlepage"><div><div><h4 class="title">处理特殊字符</h4></div></div></div><p>http://www.netkiller.cn/release/1.0.1</p><pre class="programlisting">
			
@RequestMapping(value =	"/release/{version:[a-zA-Z0-9\\.]+}", method = RequestMethod.GET)
public @ResponseBody
	String release(@PathVariable String version) {
	log.debug("version: ", version);
	return version;
}			
			
			</pre><p>http://www.netkiller.cn/release/1.0.1/other</p><pre class="programlisting">
			
@RequestMapping(value="/release/{version:.+}",method=RequestMethod.GET)
public void download(HttpSession
	session,@PathVariable("version")String version){
	return version;
}			
			

			</pre></section><section class="section" id="id955"><div class="titlepage"><div><div><h4 class="title">@PathVariable 注意事项</h4></div></div></div><p>@PathVariable 参数传统需要注意，参数中不能携带 “/”,斜杠会被视为目录。</p><pre class="programlisting">
			
	@RequestMapping("/PathVariable/{code}.html")
	@ResponseBody
	public String urlTestId(@PathVariable String code) {
		return code;
	}
			
			</pre></section></section><section class="section" id="@MatrixVariable"><div class="titlepage"><div><div><h3 class="title">@MatrixVariable注解，RFC3986定义URI的路径(Path)中可包含name-value片段</h3></div></div></div><pre class="programlisting">
		
/*                                                                                                                                                                                                                                                                  
 请求为/netkiller/color=123,321                                                                                                                                                                                                                                         
 那么color值为123,321                                                                                                                                                                                                                                               
*/                                                                                                                                                                                                                                                                  
@RequestMapping(path="/netkiller/{id}", method=RequestMethod.GET)                                                                                                                                                                                                       
public String test1(@MatrixVariable Integer[] color){}                                                                                                                                                                                                              
/*                                                                                                                                                                                                                                                                  
 请求为/netkiller/color=123;color=321                                                                                                                                                                                                                                   
 那么color值为123,321                                                                                                                                                                                                                                               
*/                                                                                                                                                                                                                                                                  
@RequestMapping(path="/netkiller/{id}", method=RequestMethod.GET)                                                                                                                                                                                                       
public String test1(@MatrixVariable Integer[] color){}         
		
		</pre></section><section class="section" id="@ModelAttribute"><div class="titlepage"><div><div><h3 class="title">@ModelAttribute</h3></div></div></div><p>@ModelAttribute 处理 HTML FORM POST 提交</p><pre class="programlisting">
		
package cn.netkiller.pojo;

import java.util.List;

public class Deploy {

	private String group;
	private String envionment;
	private String project;
	private List&lt;String&gt; arguments;
	public Deploy() {
		// TODO Auto-generated constructor stub
	}
	// Getters &amp; Setters
}
		
		</pre><pre class="programlisting">
		
	@RequestMapping(value="/deploy/post",  method = RequestMethod.POST)
	public ModelAndView post(@ModelAttribute("deploy")Deploy deploy, BindingResult result) {
		if (result.hasErrors()) {
			System.out.println(result.toString());
        }
		System.out.println(deploy.toString());
		return new ModelAndView("output").addObject("output", deploy.toString());
	}		
		
		</pre></section><section class="section" id="@ResponseBody"><div class="titlepage"><div><div><h3 class="title">@ResponseBody</h3></div></div></div><pre class="programlisting">
		
import org.springframework.web.bind.annotation.ResponseBody;		
		
		</pre><section class="section" id="id956"><div class="titlepage"><div><div><h4 class="title">直接返回HTML</h4></div></div></div><pre class="programlisting">
			
package cn.netkiller.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class Pathinfo {

	@RequestMapping(value = "/news/shenzhen/{numericId:[\\d]+}")
	@ResponseBody
	public String getNewsWithPathVariable(@PathVariable final long numericId) {
		return "Get a specific Bar with id=" + numericId;
	}

}

			
			</pre></section></section><section class="section" id="@ResponseStatus"><div class="titlepage"><div><div><h3 class="title">@ResponseStatus 设置 HTTP 状态</h3></div></div></div><pre class="programlisting">
		
	@RequestMapping(value = "/", method = RequestMethod.POST)
    @ResponseStatus(HttpStatus.CREATED)
    public String create(@RequestBody MultiValueMap&lt;String, String&gt; map) {
        return "OK";
    }		
		
		</pre></section><section class="section" id="@CrossOrigin"><div class="titlepage"><div><div><h3 class="title">@CrossOrigin</h3></div></div></div><pre class="programlisting">
		
	@CrossOrigin(origins = "http://localhost:9000")
	@GetMapping("/greeting")
	public Greeting	greeting(@RequestParam(required=false, defaultValue="World") String name) {
		System.out.println("==== in greeting ====");
		return new Greeting(counter.incrementAndGet(), String.format(template,name));
	}		
		
		</pre><pre class="programlisting">
		
@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
public class HomeController
{
    @GetMapping(path="/")
    public String home() {
        return "home";
    }
}		
		
		</pre><p>全局放行所有轻松，方法权限单独控制</p><pre class="programlisting">
		
@RestController
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class HomeController
{
    @CrossOrigin(origins = "http://example.com")
    @GetMapping(path="/")
    public String home() {
        return "home";
    }
}		
		
		</pre><section class="section" id="id957"><div class="titlepage"><div><div><h4 class="title">maxAge</h4></div></div></div><pre class="programlisting">
			
@CrossOrigin(origins = {"http://localhost:8585"}, maxAge = 4800, allowCredentials = "false")
@RestController
@RequestMapping("/info")
public class PersonController {
	@Autowired
	private PersonService service;
	@CrossOrigin(origins = {"http://localhost:8080"}, maxAge = 6000)
	@RequestMapping("home")
	public List&lt;Person&gt; show() {
		List&lt;Person&gt; list = service.getAllPerson();
		return list;
 	}
} 
			
			</pre></section></section><section class="section" id="@CookieValue"><div class="titlepage"><div><div><h3 class="title">@CookieValue - 获取 Cookie 值</h3></div></div></div><pre class="programlisting">
		
@RequestMapping("/sessionInfo")  
public void sessionInfo(@CookieValue("JSESSIONID") String cookie)  {

  //...  

}
		
		</pre></section><section class="section" id="@SessionAttributes"><div class="titlepage"><div><div><h3 class="title">@SessionAttributes</h3></div></div></div><p>@SessionAttributes:
			该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。
			该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象；
		</p><pre class="programlisting">
		
@Controller  
@RequestMapping("/editProfile")  
@SessionAttributes("profile")  
public class ProfileForm {  
    // ...  
}  
		
		</pre><pre class="programlisting">
		
@Controller
@SessionAttributes("myRequestObject")
public class MyController {
  ...
}
		
		</pre></section><section class="section" id="ModelAndView"><div class="titlepage"><div><div><h3 class="title">ModelAndView</h3></div></div></div><section class="section" id="id958"><div class="titlepage"><div><div><h4 class="title">变量传递</h4></div></div></div><pre class="programlisting">
			
@RequestMapping("/testString")
public ModelAndView	helloWorld() {
	String message = "Helloworld!!!";
	return new
	ModelAndView("welcome", "message", message);
}			
			
			</pre><pre class="programlisting">
			
public ModelAndView handleRequestInternal() {

	ModelAndView mav = new ModelAndView("test");//
	实例化一个VIew的ModelAndView实例
	mav.addObject("variable", "Hello World!");//
	添加一个带名的model对象
	return mav;
}			
			
			</pre></section><section class="section" id="id959"><div class="titlepage"><div><div><h4 class="title">ModelMap 传递多个变量</h4></div></div></div><p>传递多个字符串</p><pre class="programlisting">
			
@RequestMapping("/testModelMap")
public ModelAndView	testModelMap() {
	ModelMap model = new ModelMap();

	model.addAttribute("username", "Neo");
	model.addAttribute("password", "Netkiller");

	return new ModelAndView("test/modelmap", model);
}			
			
			</pre><p>推荐使用ModelMap</p><pre class="programlisting">
			
	@RequestMapping("/testMapString")
	public ModelAndView testMapString() {

		Map&lt;String,String&gt; data = new HashMap&lt;String,String&gt;();
		data.put("username","Neo");
		data.put("password","Netkiller");
	    return new ModelAndView("test/modelmap",data);

	}
			
			</pre><pre class="programlisting">
			
&lt;%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
${username}&lt;br&gt;
${password}&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
			
			</pre></section><section class="section" id="id960"><div class="titlepage"><div><div><h4 class="title">redirect</h4></div></div></div><pre class="programlisting">
			
	@RequestMapping("/testRedirect")
	public ModelAndView testRedirect(){
		   RedirectView view = new RedirectView("testMapString.html");
		   return new ModelAndView(view);
	}
			
			</pre></section><section class="section" id="id961"><div class="titlepage"><div><div><h4 class="title">ArrayList</h4></div></div></div><pre class="programlisting">
			
	@RequestMapping(value = "testList")
	public ModelAndView testList() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("/test/list");

		// List
		List&lt;String&gt; list = new ArrayList&lt;String&gt;();
		list.add("java");
		list.add("c++");
		list.add("oracle");
		mav.addObject("bookList", list);

		return mav;
	}
			
			</pre><pre class="programlisting">
			
&lt;%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%&gt;
&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	${bookList}
	&lt;br&gt;

	&lt;c:forEach items="${bookList}" var="node"&gt;
		&lt;c:out value="${node}"&gt;&lt;/c:out&gt;&lt;br&gt;
	&lt;/c:forEach&gt;

&lt;/body&gt;
&lt;/html&gt;
			
			</pre></section><section class="section" id="id962"><div class="titlepage"><div><div><h4 class="title">HashMap</h4></div></div></div><pre class="programlisting">
			
	@RequestMapping("/testMap")
	public ModelAndView testMap() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("test/map"); // 返回的文件名

		// Map
		Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
		map.put("Java", "http://www.netkiller.cn/java");
		map.put("PHP", "http://www.netkiller.cn/php");
		map.put("Home", "http://www.netkiller.cn");
		mav.addObject("channel", map);

		return mav;
	}
			
			</pre><pre class="programlisting">
			
&lt;%@ page language="java" contentType="text/html; charset=utf-8"
    pageEncoding="utf-8"%&gt;
&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;c:forEach items="${channel}" var="node"&gt;
		&lt;a href="&lt;c:out value="${node.value}"&gt;&lt;/c:out&gt;"&gt;&lt;c:out value="${node.key}"&gt;&lt;/c:out&gt;&lt;/a&gt;
        &lt;br/&gt;
	&lt;/c:forEach&gt;
&lt;/body&gt;
&lt;/html&gt;
			
			</pre></section><section class="section" id="id963"><div class="titlepage"><div><div><h4 class="title">传递对象</h4></div></div></div><pre class="programlisting">
			
	@RequestMapping("/testObject")
	public ModelAndView testObject() {
		ModelMap model = new ModelMap();

		User user = new User("neo", "passw0rd");
		model.addAttribute("user", user);
		return new ModelAndView("test/object", model);

	}
			
			</pre><pre class="programlisting">
			
package cn.netkiller;

public class User {
	public String username;
	public String password;
	public User(String username, String password){
		this.username = username;
		this.password = password;
	}
	public String getUsername(){
		return this.username;
	}
	public String getPassword(){
		return this.password;
	}
}
			
			</pre><pre class="programlisting">
			
&lt;%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
Username: ${user.username}&lt;br&gt;
Password: ${user.password}&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
			
			</pre></section></section><section class="section" id="http"><div class="titlepage"><div><div><h3 class="title">HttpServletRequest / HttpServletResponse </h3></div></div></div><section class="section" id="id964"><div class="titlepage"><div><div><h4 class="title">HttpServletResponse</h4></div></div></div><p>HttpServletResponse 实例</p><pre class="programlisting">
			
package cn.netkiller.api.rest;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import api.util.MatrixToImageWriter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Hashtable;

@Controller
@RequestMapping("/public/QRCode")
public class QRCodeController {
    private static final Logger log = LoggerFactory.getLogger(QRCodeController.class);
	
    @RequestMapping("/create/{code}" )
    @ResponseBody
    public void create(@PathVariable String code, HttpServletResponse httpServletResponse) throws WriterException, IOException {
        log.info(code);
        if (code != null &amp;&amp; !"".equals(code)){
            ServletOutputStream stream = null;
            try {
                String text = code; 	// 二维码内容
                int width = 300; 		// 二维码图片宽度
                int height = 300; 		// 二维码图片高度
                String format = "gif";	// 二维码的图片格式

                Hashtable&lt;EncodeHintType, String&gt; hints = new Hashtable&lt;EncodeHintType, String&gt;();
                hints.put(EncodeHintType.CHARACTER_SET, "utf-8");   // 内容所使用字符集编码

                BitMatrix bitMatrix = new MultiFormatWriter().encode(text, BarcodeFormat.QR_CODE, width, height, hints);
                // 生成二维码
                stream = httpServletResponse.getOutputStream();
                MatrixToImageWriter.writeToStream(bitMatrix, format, stream);

            }catch (WriterException e) {
                e.printStackTrace();
            } finally {
                if (stream != null) {
                    stream.flush();
                    stream.close();
                }
            }
        }
    }

    @RequestMapping("show")
    @ResponseBody
    public ModelAndView show(){

        return new ModelAndView("/qrcode/qrcode");
    }
}		
			
			</pre></section><section class="section" id="id965"><div class="titlepage"><div><div><h4 class="title">HttpServletRequest</h4></div></div></div><pre class="programlisting">
			
package com.example.demo.controller;

import java.io.IOException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/test")
public class TestController {

	public TestController() {
		// TODO Auto-generated constructor stub
	}

	@GetMapping("/get")
	public String get(@RequestHeader String lang) throws IOException {
		System.out.println(lang);
		return lang;
	}

	@PostMapping("/post")
	public String post(@RequestHeader String lang) throws IOException {
		System.out.println(lang);
		return lang;
	}

	@GetMapping("/list")
	public Map&lt;String, String&gt; x(HttpServletRequest request) throws IOException {

		return getHeadersInfo(request);
	}

	private Map&lt;String, String&gt; getHeadersInfo(HttpServletRequest request) {

		Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();

		Enumeration&lt;?&gt; headerNames = request.getHeaderNames();
		while (headerNames.hasMoreElements()) {
			String key = (String) headerNames.nextElement();
			String value = request.getHeader(key);
			map.put(key, value);
		}

		return map;
	}

}

			
			</pre></section></section><section class="section" id="StreamingResponseBody"><div class="titlepage"><div><div><h3 class="title">StreamingResponseBody 输出 Raw Data</h3></div></div></div><pre class="programlisting">
		
@GetMapping("/download")
public StreamingResponseBody handle() {
	return new StreamingResponseBody() {
		@Override
		public void writeTo(OutputStream outputStream) throws IOException {
			// write...
		}
	};
}		
		
		</pre></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch40.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch40.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch40s03.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">第 40 章 Spring MVC </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> @RestController</td></tr></table></div></footer></body></html>