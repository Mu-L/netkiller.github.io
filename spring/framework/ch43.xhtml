<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>第 43 章 @Bean</title><link rel="stylesheet" type="text/css" href="../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="webflux/ch42s13.xhtml" title="常见问题"/><link rel="next" href="ch43s02.xhtml" title="InitializingBean"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">第 43 章 @Bean</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="webflux/ch42s13.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">部分 II. Spring Framework</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch43s02.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="chapter" id="index"><div class="titlepage"><div><div><h2 class="title">第 43 章 @Bean</h2></div></div></div><div class="toc"><div class="toc-title">目录</div><ul class="toc"><li><span class="section"><a href="ch43.xhtml#id1068">@Scope 定义类型</a></span></li><li><span class="section"><a href="ch43s02.xhtml">InitializingBean</a></span></li></ul></div><pre class="programlisting">
	
package cn.netkiller.config;

import lombok.Data;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Configuration
@Data
public class Config {

    @Bean
    public MyBean myBean() {
        return new MyBean();
    }

    @Bean(initMethod = "init", destroyMethod = "destroy")
    public MyBean myBean2() {
        return new MyBean();
    }

    @Bean({"myBean4", "myBean5"})
    @Scope("prototype")
    public MyBean myBean3() {
        return new MyBean();
    }

    public class MyBean {

        public MyBean() {
            System.out.println("MyBean Initializing");
        }

        public String output() {
            return "Helloworld!!!";
        }

        public void init() {
            System.out.println("Bean 初始化方法被调用");
        }

        public void destroy() {
            System.out.println("Bean 销毁方法被调用");
        }
    }
}

	
	</pre><p>查看注入情况</p><pre class="screen">
	
neo@MacBook-Pro-M2 ~/w/watch (main)&gt; curl -s 'http://neo:chen@localhost:8080/actuator/beans' |jq | grep -i mybean -A 5
        "myBean2": {
          "aliases": [],
          "scope": "singleton",
          "type": "cn.netkiller.config.Config$MyBean",
          "resource": "class path resource [cn/netkiller/config/Config.class]",
          "dependencies": [
            "config"
          ]
        },
--
        "myBean4": {
          "aliases": [
            "myBean5"
          ],
          "scope": "prototype",
          "type": "cn.netkiller.config.Config$MyBean",
          "resource": "class path resource [cn/netkiller/config/Config.class]",
          "dependencies": []
        },
        "dbHealthContributor": {
          "aliases": [],
--
        "myBean": {
          "aliases": [],
          "scope": "singleton",
          "type": "cn.netkiller.config.Config$MyBean",
          "resource": "class path resource [cn/netkiller/config/Config.class]",
          "dependencies": [
            "config"
          ]
        },	
	
	</pre><section class="section" id="id1068"><div class="titlepage"><div><div><h2 class="title" style="clear: both">@Scope 定义类型</h2></div></div></div><pre class="programlisting">
		
    @Bean({"neo","netkiller"})
    @Scope("prototype")
    public MyBean myBean(){
        return new MyBean();
    }		
		
		</pre><pre class="screen">
		
Scope		详解
singleton	默认单例的bean定义信息，对于每个IOC容器来说都是单例对象
prototype	bean对象的定义为任意数量的对象实例
request		bean对象的定义为一次HTTP请求的生命周期，也就是说，每个HTTP请求都有自己的bean实例，它是在单个bean定义的后面创建的。仅仅在web-aware的上下文中有效
session		bean对象的定义为一次HTTP会话的生命周期。仅仅在web-aware的上下文中有效
application	bean对象的定义范围在ServletContext生命周期内。仅仅在web-aware的上下文中有效
websocket	bean对象的定义为WebSocket的生命周期内。仅仅在web-aware的上下文中有效
		
		</pre><p>singleton和prototype 一般都用在普通的Java项目中，而request、session、application、websocket都用于web应用中。</p><pre class="programlisting">
		
	@Bean
    @Scope(value = "singleton")
    public Person person(){
        return new Person();
    }		
		
		</pre><pre class="screen">
		
ConfigurableBeanFactory.SCOPE_PROTOTYPE，即“prototype”
ConfigurableBeanFactory.SCOPE_SINGLETON，即“singleton”
WebApplicationContext.SCOPE_REQUEST，即“request”
WebApplicationContext.SCOPE_SESSION，即“session”
		
		</pre></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="webflux/ch42s13.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="pt02.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch43s02.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">常见问题 </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> InitializingBean</td></tr></table></div></footer></body></html>