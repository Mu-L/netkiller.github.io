<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>ribbon</title><link rel="stylesheet" type="text/css" href="../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch64s05.xhtml" title="Eureka 配置项"/><link rel="next" href="ch64s07.xhtml" title="获取 EurekaClient 信息"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">ribbon</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch64s05.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 64 章 Spring Cloud Netflix</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch64s07.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="ribbon"><div class="titlepage"><div><div><h3 class="title">ribbon</h3></div></div></div><section class="section" id="id1372"><div class="titlepage"><div><div><h4 class="title"/></div></div></div><pre class="programlisting">
			
@Configuration
public class RibbonConfigure {

    @LoadBalanced
    @Bean
    public RestTemplate restTemplate(){
        return new RestTemplate();
    }

    //指定Ribbon使用随机策略
    @Bean
    public IRule loadBalanceRule(){
        //return new RandomRule();
        List&lt;Integer&gt; ports = new ArrayList&lt;&gt;();
        ports.add(8081);
        return new CustomRule(ports);
    }
}
			
			</pre></section><section class="section" id="id1375"><div class="titlepage"><div><div><h4 class="title">LoadBalancerClient 实例</h4></div></div></div><section class="section" id="id1373"><div class="titlepage"><div><div><h5 class="title">application.properties</h5></div></div></div><pre class="screen">
				
web.ribbon.listOfServers=localhost:7900,localhost:7901,localhost:7902				
				
				</pre></section><section class="section" id="id1374"><div class="titlepage"><div><div><h5 class="title">LoadBalancerClient 获取服务器列表</h5></div></div></div><pre class="screen">
				
package cn.netkiller.openfeign.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class TestController {

	@Autowired
	private LoadBalancerClient loadBalancerClient;

	@GetMapping("/lb")
	public String LoadBalancer() {
		ServiceInstance serviceInstance = this.loadBalancerClient.choose("web");
		System.out.println("Server: " + serviceInstance.getServiceId() + ":" + serviceInstance.getHost() + ":"
				+ serviceInstance.getPort());

		return serviceInstance.toString();
	}

}
				
				
				</pre></section></section><section class="section" id="id1377"><div class="titlepage"><div><div><h4 class="title">Ribbon 相关配置</h4></div></div></div><pre class="screen">
			
spring.cloud.loadbalancer.ribbon.enabled=false		
			
			</pre><section class="section" id="id1376"><div class="titlepage"><div><div><h5 class="title">内置负载均衡策略</h5></div></div></div><pre class="screen">
				
provider.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule				
				
				</pre><pre class="screen">
				
RoundRobinRule
轮询策略。Ribbon 默认采用的策略。若经过一轮轮询没有找到可用的 provider，其最多 轮询 10 轮。若最终还没有找到，则返回 null。

RandomRule
随机策略，从所有可用的 provider 中随机选择一个。

RetryRule
重试策略。先按照 RoundRobinRule 策略获取 provider，若获取失败，则在指定的时限内重试。默认的时限为 500 毫秒。

BestAvailableRule
最可用策略。选择并发量最小的 provider，即连接的消费者数量最少的 provider。

AvailabilityFilteringRule
可用过滤算法。该算法规则是:过滤掉处于熔断状态的 provider 与已经超过连接极限的 provider，对剩余 provider 采用轮询策略。

ZoneAvoidanceRule
zone 回避策略。根据 provider 所在 zone 及 provider 的可用性，对 provider 进行选择。

WeightedResponseTimeRule
“权重响应时间”策略。根据每个 provider 的平均响应时间计算其权重，响应时间越快权重越大，被选中的机率就越高。在刚启动时采用轮询策略。后面就会根据权重进行选择了。				
				
				</pre></section></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch64s05.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch64.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch64s07.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">Eureka 配置项 </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> 获取 EurekaClient 信息</td></tr></table></div></footer></body></html>