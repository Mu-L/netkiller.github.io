<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>注册发现</title><link rel="stylesheet" type="text/css" href="../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch68.xhtml" title="第 68 章 Spring Cloud with Kubernetes"/><link rel="next" href="alibaba/ch69.xhtml" title="第 69 章 Spring Cloud Alibaba"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">注册发现</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch68.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 68 章 Spring Cloud with Kubernetes</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="alibaba/ch69.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="id6696"><div class="titlepage"><div><div><h3 class="title">注册发现</h3></div></div></div><p>有了 Kubernetes 注册发现，我们就可以抛弃 Eureka Server。</p><section class="section" id="id1402"><div class="titlepage"><div><div><h4 class="title">Maven 父项目</h4></div></div></div><pre class="screen">
			
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

	&lt;groupId&gt;cn.netkiller&lt;/groupId&gt;
	&lt;artifactId&gt;kubernetes&lt;/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
	&lt;packaging&gt;pom&lt;/packaging&gt;

	&lt;name&gt;kubernetes&lt;/name&gt;

	&lt;url&gt;http://www.netkiller.cn&lt;/url&gt;
	&lt;description&gt;Spring Cloud with Kubernetes&lt;/description&gt;

	&lt;organization&gt;
		&lt;name&gt;Netkiller Spring Cloud 手札&lt;/name&gt;
		&lt;url&gt;http://www.netkiller.cn&lt;/url&gt;
	&lt;/organization&gt;

	&lt;developers&gt;
		&lt;developer&gt;
			&lt;name&gt;Neo&lt;/name&gt;
			&lt;email&gt;netkiller@msn.com&lt;/email&gt;
			&lt;organization&gt;Netkiller Spring Cloud 手札&lt;/organization&gt;
			&lt;organizationUrl&gt;http://www.netkiller.cn&lt;/organizationUrl&gt;
			&lt;roles&gt;
				&lt;role&gt;Author&lt;/role&gt;
			&lt;/roles&gt;
		&lt;/developer&gt;
	&lt;/developers&gt;

	&lt;properties&gt;
		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
		&lt;spring-cloud.version&gt;Hoxton.SR8&lt;/spring-cloud.version&gt;

		&lt;docker.registry&gt;registry.netkiller.cn:5000&lt;/docker.registry&gt;
		&lt;docker.registry.name&gt;netkiller&lt;/docker.registry.name&gt;
		&lt;docker.image&gt;mcr.microsoft.com/java/jre:15-zulu-alpine&lt;/docker.image&gt;
	&lt;/properties&gt;

	&lt;parent&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
		&lt;version&gt;2.3.4.RELEASE&lt;/version&gt;
		&lt;relativePath /&gt;
	&lt;/parent&gt;

	&lt;dependencyManagement&gt;
		&lt;dependencies&gt;
			&lt;dependency&gt;
				&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
				&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
				&lt;version&gt;${spring-cloud.version}&lt;/version&gt;
				&lt;type&gt;pom&lt;/type&gt;
				&lt;scope&gt;import&lt;/scope&gt;
			&lt;/dependency&gt;
		&lt;/dependencies&gt;
	&lt;/dependencyManagement&gt;

	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
			&lt;artifactId&gt;lombok&lt;/artifactId&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;

	&lt;modules&gt;
		&lt;module&gt;service&lt;/module&gt;
		&lt;module&gt;ConfigMaps&lt;/module&gt;
		&lt;module&gt;provider&lt;/module&gt;
		&lt;module&gt;consumer&lt;/module&gt;
	&lt;/modules&gt;

&lt;/project&gt;			
			
			</pre></section><section class="section" id="id1408"><div class="titlepage"><div><div><h4 class="title">provider</h4></div></div></div><p/><section class="section" id="id1403"><div class="titlepage"><div><div><h5 class="title">Maven 依赖</h5></div></div></div><pre class="screen">
				
&lt;?xml version="1.0"?&gt;
&lt;project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	&lt;parent&gt;
		&lt;groupId&gt;cn.netkiller&lt;/groupId&gt;
		&lt;artifactId&gt;kubernetes&lt;/artifactId&gt;
		&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
	&lt;/parent&gt;
	&lt;groupId&gt;cn.netkiller&lt;/groupId&gt;
	&lt;artifactId&gt;provider&lt;/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
	&lt;name&gt;provider&lt;/name&gt;
	&lt;url&gt;http://maven.apache.org&lt;/url&gt;
	&lt;properties&gt;
		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
	&lt;/properties&gt;
	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
			&lt;artifactId&gt;spring-cloud-starter-kubernetes&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
			&lt;/plugin&gt;
			&lt;plugin&gt;
				&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
				&lt;configuration&gt;
					&lt;skip&gt;true&lt;/skip&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;

			&lt;plugin&gt;
				&lt;groupId&gt;com.spotify&lt;/groupId&gt;
				&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;
				&lt;version&gt;1.2.2&lt;/version&gt;
				&lt;configuration&gt;
					&lt;imageName&gt;${docker.registry}/${docker.registry.name}/${project.artifactId}&lt;/imageName&gt;
					&lt;baseImage&gt;${docker.image}&lt;/baseImage&gt;
					&lt;maintainer&gt;netkiller@msn.com&lt;/maintainer&gt;
					&lt;volumes&gt;/tmp&lt;/volumes&gt;
					&lt;workdir&gt;/srv&lt;/workdir&gt;
					&lt;exposes&gt;8080&lt;/exposes&gt;
					&lt;env&gt;
						&lt;JAVA_OPTS&gt;-server -Xms128m -Xmx256m&lt;/JAVA_OPTS&gt;
					&lt;/env&gt;
					&lt;entryPoint&gt;["sh", "-c", "java ${JAVA_OPTS} -jar /srv/${project.build.finalName}.jar ${SPRING_OPTS}"]&lt;/entryPoint&gt;
					&lt;resources&gt;
						&lt;resource&gt;
							&lt;targetPath&gt;/srv&lt;/targetPath&gt;
							&lt;directory&gt;${project.build.directory}&lt;/directory&gt;
							&lt;include&gt;${project.build.finalName}.jar&lt;/include&gt;
						&lt;/resource&gt;
					&lt;/resources&gt;
					&lt;!-- &lt;image&gt;${docker.image.prefix}/${project.artifactId}&lt;/image&gt; --&gt;
					&lt;!-- &lt;newName&gt;${docker.image.prefix}/${project.artifactId}:${project.version}&lt;/newName&gt; --&gt;
					&lt;!-- &lt;serverId&gt;docker-hub&lt;/serverId&gt; --&gt;
					&lt;registryUrl&gt;http://${docker.registry}/v2/&lt;/registryUrl&gt;
					&lt;imageTags&gt;
						&lt;!-- &lt;imageTag&gt;${project.version}&lt;/imageTag&gt; --&gt;
						&lt;imageTag&gt;latest&lt;/imageTag&gt;
					&lt;/imageTags&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;
&lt;/project&gt;
				
				
				</pre></section><section class="section" id="id1404"><div class="titlepage"><div><div><h5 class="title">Springboot 启动类</h5></div></div></div><p>注意：这里必须使用 @EnableDiscoveryClient 注解，不能使用 @EnableEurekaClient。</p><p>他们的区别是 @EnableEurekaClient 只能注册到 Eureka Server，而 @EnableDiscoveryClient 不仅可以注册进 Eureka Server 还能注册到 ZooKeeper，Consul，Kubernetes 等等......</p><pre class="programlisting">
				
package cn.netkiller.provider;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

@SpringBootApplication
@EnableDiscoveryClient
public class ProviderApplication {
	public static void main(String[] args) {
		System.out.println("Hello World!");
		SpringApplication.run(ProviderApplication.class, args);
	}
}				
				
				</pre></section><section class="section" id="id1405"><div class="titlepage"><div><div><h5 class="title">控制器</h5></div></div></div><pre class="programlisting">
				
package cn.netkiller.provider.controller;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
public class ProviderController {

	@Autowired
	private DiscoveryClient discoveryClient;

	@GetMapping("/")
	public String index() {
		return "Hello world!!!";
	}

	@GetMapping("/ping")
	public String ping() {
		try {
			return InetAddress.getLocalHost().getHostName();
		} catch (UnknownHostException e) {
			return "Pong";
		}
	}

	@GetMapping("/services")
	public List&lt;String&gt; services() {
		return this.discoveryClient.getServices();
	}

}
				
				
				</pre><p>@GetMapping("/services") 可以返回注册中心已经注册的服务。</p></section><section class="section" id="id1406"><div class="titlepage"><div><div><h5 class="title">application.properties 配置文件</h5></div></div></div><p>src/main/resource/application.properties 配置文件</p><pre class="screen">
				
spring.application.name=provider
server.port=8080		
				
				</pre><p>Pod 启动后会以 spring.application.name 设置的名字注册到注册中心，Openfeign 将改名字访问微服务。</p></section><section class="section" id="id1407"><div class="titlepage"><div><div><h5 class="title">Kubernetes provider 编排脚本</h5></div></div></div><pre class="programlisting">
				
apiVersion: v1
kind: Service
metadata:
  name: provider
  labels:
    app.kubernetes.io/name: provider
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: provider

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: provider
  labels:
    app.kubernetes.io/name: provider
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: provider
  template:
    metadata:
      labels:
        app.kubernetes.io/name: provider
        app.kubernetes.io/instance: sad-markhor
    spec:
      containers:
        - name: provider
          image: registry.netkiller.cn:5000/netkiller/provider
          #imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: "KUBERNETES_NAMESPACE"
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.namespace"				
				
				</pre></section></section><section class="section" id="id1415"><div class="titlepage"><div><div><h4 class="title">consumer</h4></div></div></div><section class="section" id="id1409"><div class="titlepage"><div><div><h5 class="title">Maven 依赖</h5></div></div></div><pre class="screen">
				
&lt;?xml version="1.0"?&gt;
&lt;project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	&lt;parent&gt;
		&lt;groupId&gt;cn.netkiller&lt;/groupId&gt;
		&lt;artifactId&gt;kubernetes&lt;/artifactId&gt;
		&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
	&lt;/parent&gt;
	&lt;groupId&gt;cn.netkiller&lt;/groupId&gt;
	&lt;artifactId&gt;consumer&lt;/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
	&lt;name&gt;consumer&lt;/name&gt;
	&lt;url&gt;http://maven.apache.org&lt;/url&gt;
	&lt;properties&gt;
		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
	&lt;/properties&gt;
	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
			&lt;artifactId&gt;spring-cloud-starter-kubernetes&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
			&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
			&lt;artifactId&gt;spring-cloud-starter-kubernetes-ribbon&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
			&lt;/plugin&gt;
			&lt;plugin&gt;
				&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
				&lt;configuration&gt;
					&lt;skip&gt;true&lt;/skip&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;com.spotify&lt;/groupId&gt;
				&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;
				&lt;version&gt;1.2.2&lt;/version&gt;
				&lt;configuration&gt;
					&lt;imageName&gt;${docker.registry}/${docker.registry.name}/${project.artifactId}&lt;/imageName&gt;
					&lt;baseImage&gt;${docker.image}&lt;/baseImage&gt;
					&lt;maintainer&gt;netkiller@msn.com&lt;/maintainer&gt;
					&lt;volumes&gt;/tmp&lt;/volumes&gt;
					&lt;workdir&gt;/srv&lt;/workdir&gt;
					&lt;exposes&gt;8080&lt;/exposes&gt;
					&lt;env&gt;
						&lt;JAVA_OPTS&gt;-server -Xms128m -Xmx256m&lt;/JAVA_OPTS&gt;
					&lt;/env&gt;
					&lt;entryPoint&gt;["sh", "-c", "java ${JAVA_OPTS} -jar /srv/${project.build.finalName}.jar ${SPRING_OPTS}"]&lt;/entryPoint&gt;
					&lt;resources&gt;
						&lt;resource&gt;
							&lt;targetPath&gt;/srv&lt;/targetPath&gt;
							&lt;directory&gt;${project.build.directory}&lt;/directory&gt;
							&lt;include&gt;${project.build.finalName}.jar&lt;/include&gt;
						&lt;/resource&gt;
					&lt;/resources&gt;
					&lt;!-- &lt;image&gt;${docker.image.prefix}/${project.artifactId}&lt;/image&gt; --&gt;
					&lt;!-- &lt;newName&gt;${docker.image.prefix}/${project.artifactId}:${project.version}&lt;/newName&gt; --&gt;
					&lt;!-- &lt;serverId&gt;docker-hub&lt;/serverId&gt; --&gt;
					&lt;registryUrl&gt;http://${docker.registry}/v2/&lt;/registryUrl&gt;
					&lt;imageTags&gt;
						&lt;!-- &lt;imageTag&gt;${project.version}&lt;/imageTag&gt; --&gt;
						&lt;imageTag&gt;latest&lt;/imageTag&gt;
					&lt;/imageTags&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;
&lt;/project&gt;
				
				
				</pre></section><section class="section" id="id1410"><div class="titlepage"><div><div><h5 class="title">Springboot 启动类</h5></div></div></div><pre class="programlisting">
				
package cn.netkiller.consumer;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients
public class ConsumerApplication {
	public static void main(String[] args) {
		System.out.println("Hello World!");
		SpringApplication.run(ConsumerApplication.class, args);
	}
}				
				
				</pre></section><section class="section" id="id1411"><div class="titlepage"><div><div><h5 class="title">控制器</h5></div></div></div><pre class="programlisting">
				
package cn.netkiller.consumer.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import cn.netkiller.consumer.feign.ProviderClient;
import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
public class ConsumerController {
	@Autowired
	private DiscoveryClient discoveryClient;

	@Autowired
	private ProviderClient providerClient;

	@GetMapping("/")
	public String index() {
		return "Consumer OK\r\n";
	}

	@GetMapping("/service")
	public Object getClient() {
		return discoveryClient.getServices();
	}

	@GetMapping("/instance")
	public List&lt;ServiceInstance&gt; getInstance(String instanceId) {
		return discoveryClient.getInstances(instanceId);
	}

	@GetMapping("/ping")
	public String ping() {
		return OperationResponse.builder().status(true).data(providerClient.ping()).build();
	}
}				
				
				</pre><p>@GetMapping("/ping") 将经过注册中心，获取到可用的服务，运行后从微服务返回结果。</p><pre class="programlisting">
				
package cn.netkiller.consumer.controller;

public class OperationResponse {

	public boolean status = false;
	public String data = "";

	public static OperationResponse builder() {
		// TODO Auto-generated method stub
		return new OperationResponse();
	}

	public OperationResponse status(boolean status) {
		this.status = status;
		return this;
	}

	public OperationResponse data(String data) {
		this.data = data;
		return this;
	}

	public String build() {
		return String.format("Status: %s, Data: %s", this.status, this.data);
	}
}
				
				
				</pre></section><section class="section" id="id1412"><div class="titlepage"><div><div><h5 class="title">FeignClient 接口</h5></div></div></div><pre class="programlisting">
				
package cn.netkiller.consumer.feign;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;

@FeignClient(name = "provider", fallback = ProviderClientFallback.class)
public interface ProviderClient {
	@GetMapping("/ping")
	String ping();
}

@Component
class ProviderClientFallback implements ProviderClient {

	@Override
	public String ping() {
		return "Error";
	}
}
				
				
				</pre></section><section class="section" id="id1413"><div class="titlepage"><div><div><h5 class="title">application.properties 配置文件</h5></div></div></div><p>src/main/resource/application.properties 配置文件</p><pre class="screen">
				
spring.application.name=consumer
server.port=8080

provider.ribbon.KubernetesNamespace=default
provider.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule
				
				</pre></section><section class="section" id="id1414"><div class="titlepage"><div><div><h5 class="title">Kubernetes consumer 编排脚本</h5></div></div></div><pre class="programlisting">
				
apiVersion: v1
kind: Service
metadata:
  name: consumer
  labels:
    app.kubernetes.io/name: consumer
spec:
  type: NodePort
  ports:
    - port: 8080
      nodePort: 30080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: consumer

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer
  labels:
    app.kubernetes.io/name: consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: consumer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consumer
    spec:
      containers:
        - name: consumer
          image: registry.netkiller.cn:5000/netkiller/consumer
          #imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
				
				
				</pre></section></section><section class="section" id="id1416"><div class="titlepage"><div><div><h4 class="title">测试</h4></div></div></div><p>编译，打包，构建Docker镜像</p><pre class="screen">
			
iMac:provider neo$ mvn package docker:build
iMac:consumer neo$ mvn package docker:build
			
			</pre><p>推送镜像</p><pre class="screen">
			
iMac:spring-cloud-kubernetes neo$ docker images | grep registry.netkiller.cn
registry.netkiller.cn:5000/netkiller/consumer     latest              63921dc9b81d        27 seconds ago      238MB
registry.netkiller.cn:5000/netkiller/provider     latest              fbcc6b3a91ef        4 minutes ago       221MB
registry.netkiller.cn:5000/netkiller/configmaps   latest              93280aec434f        23 hours ago        219MB			

iMac:spring-cloud-kubernetes neo$ docker push registry.netkiller.cn:5000/netkiller/consumer
The push refers to repository [registry.netkiller.cn:5000/netkiller/consumer]
51c839989a66: Pushed 
7c1edc21f93f: Pushed 
50644c29ef5a: Pushed 
latest: digest: sha256:2591686cfc63888f3b97ca1e950205b58a47b3d3c618242465baa0796cf7e056 size: 952

iMac:spring-cloud-kubernetes neo$ docker push registry.netkiller.cn:5000/netkiller/provider
The push refers to repository [registry.netkiller.cn:5000/netkiller/provider]
47eb1c86b415: Pushed 
7c1edc21f93f: Mounted from netkiller/consumer 
50644c29ef5a: Mounted from netkiller/consumer 
latest: digest: sha256:42cdeb63cd67a5edf9e769538878a0c8f18048bcde1ef9ba22d58766afa2d52d size: 952

iMac:spring-cloud-kubernetes neo$ curl -s http://registry.netkiller.cn:5000/v2/_catalog | jq
{
  "repositories": [
    "netkiller/configmaps",
    "netkiller/consumer",
    "netkiller/provider"
  ]
}
			
			</pre><p>将 provider 和 consumer 应用部署到 Kubernetes</p><pre class="screen">
			
iMac:spring-cloud-kubernetes neo$ kubectl create -f provider/src/main/kubernetes/provider.yaml 
service/provider created
deployment.apps/provider created	

iMac:spring-cloud-kubernetes neo$ kubectl create -f consumer/src/main/kubernetes/consumer.yaml 
service/consumer created
deployment.apps/consumer created		
			
			</pre><p>查看 consumer 端口</p><pre class="screen">
			
iMac:spring-cloud-kubernetes neo$ minikube service list
|----------------------|---------------------------|--------------|----------------------------|
|      NAMESPACE       |           NAME            | TARGET PORT  |            URL             |
|----------------------|---------------------------|--------------|----------------------------|
| default              | config                    | http/8080    | http://192.168.64.12:30662 |
| default              | consumer                  | http/8080    | http://192.168.64.12:30080 |
| default              | kubernetes                | No node port |
| default              | provider                  | No node port |
| kube-system          | kube-dns                  | No node port |
| kubernetes-dashboard | dashboard-metrics-scraper | No node port |
| kubernetes-dashboard | kubernetes-dashboard      | No node port |
|----------------------|---------------------------|--------------|----------------------------|			
			
			</pre><p>测试 provider 是否工作正常</p><pre class="screen">
			
$ curl -s http://10.10.0.121:8080/ping 
provider-54875bf44-4gf49

$ curl -s http://10.10.0.121:8080/services |jq
[
  "config",
  "kubernetes",
  "provider"
]			
			
			</pre><p>查看 consumer 是否已经注册成功</p><pre class="screen">
			
iMac:spring-cloud-kubernetes neo$ curl -s http://192.168.64.12:30080/service |jq
[
  "config",
  "consumer",
  "kubernetes",
  "provider"
]

iMac:spring-cloud-kubernetes neo$ curl http://192.168.64.12:30080/ping
Status: true, Data: provider-54875bf44-4gf49			
			
			</pre><p>增加 provider 节点，然后反复请求可以看到返回不同节点的主机名</p><pre class="screen">
			
iMac:spring-cloud-kubernetes neo$ kubectl scale deployment provider --replicas=3
deployment.apps/provider scaled

iMac:spring-cloud-kubernetes neo$ curl -s http://192.168.64.12:30080/ping
Status: true, Data: provider-54875bf44-8vs72
 
iMac:spring-cloud-kubernetes neo$ curl -s http://192.168.64.12:30080/ping
Status: true, Data: provider-54875bf44-4gf49i			
			
			</pre><p>测试完毕销毁服务</p><pre class="screen">
			
iMac:spring-cloud-kubernetes neo$ kubectl delete -f consumer/src/main/kubernetes/consumer.yaml 
service "consumer" deleted
deployment.apps "consumer" deleted			
			
iMac:spring-cloud-kubernetes neo$ kubectl delete -f provider/src/main/kubernetes/provider.yaml 
service "provider" deleted
deployment.apps "provider" deleted			
			
			</pre></section><section class="section" id="id1417"><div class="titlepage"><div><div><h4 class="title"/></div></div></div><pre class="screen">
			
spring.cloud.kubernetes.discovery.enabled=false			
			
			</pre></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch68.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch68.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="alibaba/ch69.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">第 68 章 Spring Cloud with Kubernetes </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> 第 69 章 Spring Cloud Alibaba</td></tr></table></div></footer></body></html>