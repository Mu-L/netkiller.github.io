<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Kubernetes 部署微服务</title><link rel="stylesheet" type="text/css" href="../../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch69.xhtml" title="第 69 章 Spring Cloud Alibaba"/><link rel="next" href="ch69s03.xhtml" title="Nacos 配置中心/注册中心代码实例"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">Kubernetes 部署微服务</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch69.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 69 章 Spring Cloud Alibaba</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch69s03.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="id6788"><div class="titlepage"><div><div><h3 class="title">Kubernetes 部署微服务</h3></div></div></div><section class="section" id="id1423"><div class="titlepage"><div><div><h4 class="title">pom.xml 中加入 docker 插件</h4></div></div></div><pre class="programlisting">
			
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

	&lt;groupId&gt;com.example&lt;/groupId&gt;
	&lt;artifactId&gt;demo&lt;/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
	&lt;packaging&gt;jar&lt;/packaging&gt;

	&lt;name&gt;demo&lt;/name&gt;
	&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;

	&lt;parent&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
		&lt;version&gt;2.6.3&lt;/version&gt;
		&lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;
	&lt;/parent&gt;

	&lt;properties&gt;
		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
		&lt;java.version&gt;1.8&lt;/java.version&gt;

		&lt;sonar.projectKey&gt;netkiller.cn_java_AX0HsoVkT19KeT2iVgUT&lt;/sonar.projectKey&gt;
		&lt;sonar.qualitygate.wait&gt;true&lt;/sonar.qualitygate.wait&gt;

		&lt;docker.registry&gt;registry.netkiller.cn/netkiller.cn&lt;/docker.registry&gt;

	&lt;/properties&gt;

	&lt;repositories&gt;
		&lt;repository&gt;
			&lt;id&gt;gitlab-maven&lt;/id&gt;
			&lt;url&gt;${env.CI_API_V4_URL}/projects/${env.CI_PROJECT_ID}/packages/maven&lt;/url&gt;
		&lt;/repository&gt;
	&lt;/repositories&gt;
	&lt;distributionManagement&gt;
		&lt;repository&gt;
			&lt;id&gt;gitlab-maven&lt;/id&gt;
			&lt;url&gt;${CI_API_V4_URL}/projects/${env.CI_PROJECT_ID}/packages/maven&lt;/url&gt;
		&lt;/repository&gt;
		&lt;snapshotRepository&gt;
			&lt;id&gt;gitlab-maven&lt;/id&gt;
			&lt;url&gt;${CI_API_V4_URL}/projects/${env.CI_PROJECT_ID}/packages/maven&lt;/url&gt;
		&lt;/snapshotRepository&gt;
	&lt;/distributionManagement&gt;

	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;junit&lt;/groupId&gt;
			&lt;artifactId&gt;junit&lt;/artifactId&gt;
			&lt;!-- &lt;version&gt;4.13.2&lt;/version&gt; --&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;

	&lt;/dependencies&gt;

	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
			&lt;/plugin&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;com.spotify&lt;/groupId&gt;
				&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;
				&lt;version&gt;1.2.2&lt;/version&gt;
				&lt;configuration&gt;
					&lt;imageName&gt;${docker.registry}/${project.artifactId}&lt;/imageName&gt;
					&lt;baseImage&gt;openjdk:8-alpine&lt;/baseImage&gt;
					&lt;maintainer&gt;netkiller@msn.com&lt;/maintainer&gt;
					&lt;volumes&gt;/srv&lt;/volumes&gt;
					&lt;workdir&gt;/srv&lt;/workdir&gt;
					&lt;env&gt;
						&lt;JAVA_OPTS&gt;-server -Xms512m -Xmx4096m -Djava.security.egd=file:/dev/./urandom&lt;/JAVA_OPTS&gt;
					&lt;/env&gt;
					&lt;exposes&gt;8080&lt;/exposes&gt;
					&lt;entryPoint&gt;["sh", "-c", "/srv/docker-entrypoint.sh"]&lt;/entryPoint&gt;
					&lt;resources&gt;
						&lt;resource&gt;
							&lt;targetPath&gt;/srv&lt;/targetPath&gt;
							&lt;directory&gt;${project.build.directory}&lt;/directory&gt;
							&lt;include&gt;${project.build.finalName}.jar&lt;/include&gt;
						&lt;/resource&gt;
						&lt;resource&gt;
							&lt;targetPath&gt;/srv&lt;/targetPath&gt;
							&lt;directory&gt;.&lt;/directory&gt;
							&lt;include&gt;docker-entrypoint.sh&lt;/include&gt;
						&lt;/resource&gt;
					&lt;/resources&gt;
					&lt;registryUrl&gt;http://${docker.registry}/v2/&lt;/registryUrl&gt;
					&lt;imageTags&gt;
						&lt;imageTag&gt;${project.version}&lt;/imageTag&gt;
						&lt;imageTag&gt;latest&lt;/imageTag&gt;
					&lt;/imageTags&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;
&lt;/project&gt;			
			
			</pre></section><section class="section" id="id1424"><div class="titlepage"><div><div><h4 class="title">容器启动脚本</h4></div></div></div><p>在项目目录创建 docker-entrypoint.sh 文件</p><pre class="programlisting">
			
#!/bin/sh

if [ ! -z $1 ]; then
    MODULE=$1
    shift
fi

if [ -z $JAVA_OPTS ]; then
    JAVA_OPTS='-Xms1024m -Xmx4096m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m -Djava.security.egd=file:/dev/./urandom -Duser.timezone=GMT+8 -Dfile.encoding=utf-8'
fi

if [ -z $MODULE ]; then
    echo "MODULE environment is not set"
    exit 127
else
    PACKAGE=/srv/$MODULE.jar
fi

DEBUG='-Xdebug -Xrunjdwp:transport=dt_socket,suspend=n,server=y,address=5555'
SKYWALKING="-javaagent:/srv/skywalking/agent/skywalking-agent.jar -Dskywalking.collector.backend_service=oap.netkiller.cn:11800 -Dskywalking.agent.service_name=${MODULE}"

exec java ${JAVA_OPTS}  -jar ${PACKAGE} $@			
			
			</pre><p>暂时 DEBUG，SKYWALKING 没有使用，放在一遍不碍事。脚本的用法</p><pre class="screen">
			
./docker-entrypoint.sh your_module --server.port=8080
			
			</pre></section><section class="section" id="id1425"><div class="titlepage"><div><div><h4 class="title">构建 docker 镜像</h4></div></div></div><p>运行 mvn 命令构建 docker 镜像</p><pre class="screen">
			
neo@Netkiller-iMac ~/w/java.netkiller.cn (master)&gt; mvn package docker:build docker:push			
			
			</pre><p>不出预料，你会看到下面输出</p><pre class="screen">
			
[INFO] Building image registry.netkiller.cn/netkiller.cn/demo
Step 1/9 : FROM openjdk:8-alpine

 ---&gt; a3562aa0b991
Step 2/9 : MAINTAINER netkiller@msn.com

 ---&gt; Using cache
 ---&gt; b4a79be602ae
Step 3/9 : ENV JAVA_OPTS -server -Xms512m -Xmx4096m -Djava.security.egd=file:/dev/./urandom

 ---&gt; Using cache
 ---&gt; 9d685ea4a0d3
Step 4/9 : WORKDIR /srv

 ---&gt; Using cache
 ---&gt; e2feea451bb1
Step 5/9 : ADD /srv/demo-0.0.1-SNAPSHOT.jar /srv/

 ---&gt; 7ad53fb991b8
Step 6/9 : ADD /srv/docker-entrypoint.sh /srv/

 ---&gt; 39def6507064
Step 7/9 : EXPOSE 8080

 ---&gt; Running in 338a99e6ec36
Removing intermediate container 338a99e6ec36
 ---&gt; f192b73ab3b9
Step 8/9 : ENTRYPOINT ["sh", "-c", "/srv/docker-entrypoint.sh"]

 ---&gt; Running in 5bda82acd305
Removing intermediate container 5bda82acd305
 ---&gt; 85c1b2615a97
Step 9/9 : VOLUME /srv

 ---&gt; Running in 27d71c55bf7e
Removing intermediate container 27d71c55bf7e
 ---&gt; 64e0d8992fdd
ProgressMessage{id=null, status=null, stream=null, error=null, progress=null, progressDetail=null}
Successfully built 64e0d8992fdd
Successfully tagged registry.netkiller.cn/netkiller.cn/demo:latest
[INFO] Built registry.netkiller.cn/netkiller.cn/demo
[INFO] Tagging registry.netkiller.cn/netkiller.cn/demo with 0.0.1-SNAPSHOT
[INFO] Tagging registry.netkiller.cn/netkiller.cn/demo with latest
			
			</pre><p>查看镜像</p><pre class="screen">
			
neo@Netkiller-iMac ~/w/java.netkiller.cn (master)&gt; docker image ls | grep netkiller
registry.netkiller.cn/netkiller.cn/demo                       0.0.1-SNAPSHOT   64e0d8992fdd   3 minutes ago    122MB
registry.netkiller.cn/netkiller.cn/demo                       latest           64e0d8992fdd   3 minutes ago    122MB			
			
			</pre></section><section class="section" id="id1426"><div class="titlepage"><div><div><h4 class="title">编排 kubernetes 容器</h4></div></div></div><pre class="programlisting">
			
from netkiller.kubernetes import *
namespace = 'default'

compose = Compose('development')

module = 'demo'
# version = '0.0.1-SNAPSHOT'
version = 'latest'

deployment = Deployment()
deployment.apiVersion('apps/v1')

deployment.metadata().name(module).labels({'app': module}).namespace(namespace)
deployment.spec().replicas(1)
deployment.spec().selector({'matchLabels': {'app': module}})
deployment.spec().template().metadata().labels({'app': module})
deployment.spec().template().spec().containers().name(module).image(
    'registry.netkiller.cn/netkiller.cn/cloud.netkiller.cn:%s' % version).ports([{
        'containerPort': 8080
    }]).env([
        {'name': 'TZ', 'value': 'Asia/Shanghai'},
        {'name': 'LANG', 'value': 'en_US.UTF-8'},
    ]).args([module,'--server.port=8080'])

# deployment.debug()
# deployment.json()

service = Service()
service.metadata().name(module)
service.metadata().namespace(namespace)
service.spec().selector({'app': module})
service.spec().type('NodePort')
service.spec().ports([{
    'name': 'http',
    'protocol': 'TCP',
    'port': 8080,
    'targetPort': 8080
}])

compose.add(deployment)
compose.add(service)

print("=" * 40, "Compose", "=" * 40)
compose.debug()
compose.delete()
compose.create()⏎  			
			
			</pre><p>查看容器运行状态</p><pre class="screen">
			
neo@Netkiller-iMac ~/w/java.netkiller.cn (master)&gt; kubectl get pods
NAME                       READY   STATUS             RESTARTS   AGE
nginx-88c84c4d8-8pmzp      1/1     Running            1          3d20h
demo-76b7598b76-5hstp      1/1     Running            0          5h43m
busybox                    0/1     CrashLoopBackOff   52         4h44m			
			
			</pre></section><section class="section" id="id1427"><div class="titlepage"><div><div><h4 class="title">启动指定 nacos</h4></div></div></div><p>容器中不方便修改配置文件，我们可以使用环境变量覆盖配置</p><pre class="screen">
			 
JAVA_OPTS=-Dspring.cloud.nacos.username=nacos \
-Dspring.cloud.nacos.password=nacos \
-Dspring.cloud.nacos.config.server-addr=mse-032dbef0-nacos-ans.mse.aliyuncs.com:8848 \
-Dspring.cloud.nacos.discovery.server-addr=mse-032dbef0-nacos-ans.mse.aliyuncs.com:8848 \
			
			</pre><p>相当于</p><pre class="screen">
			 
java -Dspring.cloud.nacos.username=nacos \
-Dspring.cloud.nacos.password=nacos \
-Dspring.cloud.nacos.config.server-addr=mse-032dbef0-nacos-ans.mse.aliyuncs.com:8848 \
-Dspring.cloud.nacos.discovery.server-addr=mse-032dbef0-nacos-ans.mse.aliyuncs.com:8848 \
-jar netkiller.jar
			
			</pre></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch69.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch69.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch69s03.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">第 69 章 Spring Cloud Alibaba </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> Nacos 配置中心/注册中心代码实例</td></tr></table></div></footer></body></html>