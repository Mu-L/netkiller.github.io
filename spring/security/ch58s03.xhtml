<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>SecurityFilterChain</title><link rel="stylesheet" type="text/css" href="../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch58s02.xhtml" title="Springboot 3 Security + OncePerRequestFilter"/><link rel="next" href="ch58s04.xhtml" title="@PreAuthorize"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">SecurityFilterChain</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch58s02.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 58 章 Springboot 3 + Security 6</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch58s04.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="SecurityFilterChain"><div class="titlepage"><div><div><h2 class="title" style="clear: both">SecurityFilterChain</h2></div></div></div><pre class="programlisting">
			
       return http.authorizeHttpRequests(authorize -&gt; {
                    try {
                        authorize
                                // 放行登录接口
                                .requestMatchers("/", "/ping").permitAll()
                                .requestMatchers("/token").permitAll()
                                // 放行资源目录
                                .requestMatchers("/static/**", "/resources/**").permitAll()
                                // 其余的都需要权限校验
                                .anyRequest().authenticated()
                                // 防跨站请求伪造
                                .and().csrf(csrf -&gt; csrf.disable());
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                }
        ).build();			
			
		</pre><p>开启 httpBasic 认证</p><pre class="programlisting">
			
// 使用@EnableWebSecurity注解开启Spring Security功能
@EnableWebSecurity
public class SecurityConfig {

    // 定义一个SecurityFilterChain bean，用于配置安全过滤器链
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                // 配置授权请求规则
                .authorizeRequests()
                // 任何请求都需要认证
                .anyRequest()
                .authenticated()
                // 使用and()方法连接多个配置
                .and()
                // 开启HTTP基本认证功能
                .httpBasic();
        return http.build();
    }
}
			
		</pre></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch58s02.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch58.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch58s04.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">Springboot 3 Security + OncePerRequestFilter </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> @PreAuthorize</td></tr></table></div></footer></body></html>