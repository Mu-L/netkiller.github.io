<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>第 53 章 Spring Data with Redis</title><link rel="stylesheet" type="text/css" href="../../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="../mysql/ch52s05.xhtml" title="JPQL @Query"/><link rel="next" href="ch53s02.xhtml" title="RedisTemplate"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">第 53 章 Spring Data with Redis</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="../mysql/ch52s05.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">部分 III. Spring Data</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch53s02.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="chapter" id="index"><div class="titlepage"><div><div><h2 class="title">第 53 章 Spring Data with Redis</h2></div></div></div><div class="toc"><div class="toc-title">目录</div><ul class="toc"><li><span class="section"><a href="ch53.xhtml#springdata.redis.exmaple">集成 Redis XML 方式</a></span><ul><li><span class="section"><a href="ch53.xhtml#id1148">pom.xml</a></span></li><li><span class="section"><a href="ch53.xhtml#id1149">springframework-servlet.xml</a></span></li><li><span class="section"><a href="ch53.xhtml#id1150">Controller</a></span></li><li><span class="section"><a href="ch53.xhtml#id1151">index.jsp</a></span></li><li><span class="section"><a href="ch53.xhtml#id1152">测试</a></span></li></ul></li><li><span class="section"><a href="ch53s02.xhtml">RedisTemplate</a></span><ul><li><span class="section"><a href="ch53s02.xhtml#stringRedisTemplate">stringRedisTemplate 基本用法</a></span></li><li><span class="section"><a href="ch53s02.xhtml#id1153">设置缓存时间</a></span></li><li><span class="section"><a href="ch53s02.xhtml#id1154">字符串截取</a></span></li><li><span class="section"><a href="ch53s02.xhtml#id1155">追加字符串</a></span></li><li><span class="section"><a href="ch53s02.xhtml#id1156">设置键的字符串值并返回其旧值</a></span></li><li><span class="section"><a href="ch53s02.xhtml#id1157">increment</a></span></li><li><span class="section"><a href="ch53s02.xhtml#delete">删除 key </a></span></li><li><span class="section"><a href="ch53s02.xhtml#size">返回字符串长度</a></span></li><li><span class="section"><a href="ch53s02.xhtml#setIfAbsent">如果key不存便缓存。</a></span></li><li><span class="section"><a href="ch53s02.xhtml#multiSet">缓存多个值 /获取多个值 multiSet / multiGet</a></span></li><li><span class="section"><a href="ch53s02.xhtml#list">List</a></span></li><li><span class="section"><a href="ch53s02.xhtml#set">SET 数据类型</a></span></li><li><span class="section"><a href="ch53s02.xhtml#zset">有序的 set 集合</a></span></li><li><span class="section"><a href="ch53s02.xhtml#hash">Hash</a></span></li><li><span class="section"><a href="ch53s02.xhtml#redisTemplate.expire">过期时间未执行</a></span></li><li><span class="section"><a href="ch53s02.xhtml#id1192">setBit / getBit 二进制位操作</a></span></li><li><span class="section"><a href="ch53s02.xhtml#JsonRedisTemplate">存储 Json 对象</a></span></li></ul></li><li><span class="section"><a href="ch53s03.xhtml">Spring Data Redis - Repository Examples</a></span><ul><li><span class="section"><a href="ch53s03.xhtml#id1196">@EnableRedisRepositories 启动 Redis 仓库</a></span></li><li><span class="section"><a href="ch53s03.xhtml#id1197">定义 Domain 类</a></span></li><li><span class="section"><a href="ch53s03.xhtml#id1198">Repository 接口</a></span></li><li><span class="section"><a href="ch53s03.xhtml#id1199">测试代码</a></span></li></ul></li></ul></div><section class="section" id="springdata.redis.exmaple"><div class="titlepage"><div><div><h2 class="title" style="clear: both">集成 Redis XML 方式</h2></div></div></div><section class="section" id="id1148"><div class="titlepage"><div><div><h3 class="title">pom.xml</h3></div></div></div><pre class="screen">
		
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-redis&lt;/artifactId&gt;
		&lt;/dependency&gt;			
		
			</pre></section><section class="section" id="id1149"><div class="titlepage"><div><div><h3 class="title">springframework-servlet.xml</h3></div></div></div><pre class="screen">
		
	&lt;!-- Redis Connection Factory --&gt;
	&lt;bean id="jedisConnFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="192.168.2.1" p:port="6379" p:use-pool="true" /&gt;

	&lt;!-- redis redisTemplate definition --&gt;
	&lt;bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnFactory" /&gt;
		
			</pre><div class="example" id="id1466"><div class="example-title">例 53.1. Spring Data Redis Example</div><div class="example-contents"><pre class="screen">
			
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd"&gt;

	&lt;mvc:resources location="/images/" mapping="/images/**" /&gt;
	&lt;mvc:resources location="/css/" mapping="/css/**" /&gt;

	&lt;context:component-scan base-package="cn.netkiller.controller" /&gt;

	&lt;mvc:annotation-driven /&gt;

	&lt;bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
		&lt;property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" /&gt;
		&lt;property name="prefix" value="/WEB-INF/jsp/" /&gt;
		&lt;property name="suffix" value=".jsp" /&gt;
		&lt;!-- &lt;property name="viewNames" value="*.jsp" /&gt; --&gt;
	&lt;/bean&gt;

	&lt;bean id="configuracion"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;
		&lt;property name="location" value="classpath:resources/development.properties" /&gt;
	&lt;/bean&gt;

	&lt;bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
		&lt;property name="driverClassName" value="${jdbc.driverClassName}" /&gt;
		&lt;property name="url" value="${jdbc.url}" /&gt;
		&lt;property name="username" value="${jdbc.username}" /&gt;
		&lt;property name="password" value="${jdbc.password}" /&gt;
	&lt;/bean&gt;

	&lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt;
		&lt;property name="dataSource" ref="dataSource" /&gt;
	&lt;/bean&gt;
	&lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt;
		&lt;property name="basePackage" value="cn.netkiller.mapper" /&gt;
	&lt;/bean&gt;

	&lt;bean id="userService" class="cn.netkiller.service.UserService"&gt;
	&lt;/bean&gt;

	&lt;!-- Redis Connection Factory --&gt;
	&lt;bean id="jedisConnFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="192.168.2.1" p:port="6379" p:use-pool="true" /&gt;

	&lt;!-- redis redisTemplate definition --&gt;
	&lt;bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnFactory" /&gt;
&lt;/beans&gt;				
			
				</pre></div></div><br class="example-break"/></section><section class="section" id="id1150"><div class="titlepage"><div><div><h3 class="title">Controller</h3></div></div></div><pre class="screen">
		
package cn.netkiller.controller;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.ListOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.StringRedisSerializer;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import cn.netkiller.model.User;

@Controller
public class CacheController {

	// inject the actual redisTemplate
	@Autowired
	private RedisTemplate&lt;String, String&gt; redisTemplate;

	// inject the redisTemplate as ListOperations
	@Resource(name = "redisTemplate")
	private ListOperations&lt;String, String&gt; listOps;

	@RequestMapping("/cache")
	public ModelAndView cache() {

		String message = "";

		User user = new User();
		user.setId("1");
		user.setName("Neo");
		user.setAge(30);

		String key = "user";
		listOps.leftPush(key, user.toString());
		message = listOps.leftPop(key);

		redisTemplate.setKeySerializer(new StringRedisSerializer());
		redisTemplate.setValueSerializer(new StringRedisSerializer());
		redisTemplate.opsForValue().set("key", user.toString());

		return new ModelAndView("index/index", "variable", message);
	}
}
		
			</pre></section><section class="section" id="id1151"><div class="titlepage"><div><div><h3 class="title">index.jsp</h3></div></div></div><pre class="screen">
		
&lt;%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;br&gt;
	&lt;div style="text-align:center"&gt;
		&lt;h2&gt;
			${variable}
		&lt;/h2&gt;
	&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;			
		
			</pre></section><section class="section" id="id1152"><div class="titlepage"><div><div><h3 class="title">测试</h3></div></div></div><p>请求URL http://your.domain.com/your.html</p><pre class="screen">
		
[root@master ~]# redis-cli 
redis 127.0.0.1:6379&gt; keys *
1) "\xac\xed\x00\x05t\x00\x04user"
2) "key"

redis 127.0.0.1:6379&gt; get key
"\xac\xed\x00\x05t\x00\x1dUser [id=1, name=Neo, age=30]"
		
			</pre><div class="tip"><h3 class="title">提示</h3><p>Spring Redis 默认使用 Byte数据类型存储Key，在redis-cli中会看到 "\xac\xed\x00\x05t\x00\x04" 前缀不方便get操作，所以我们会设置使用字符串，通过 redisTemplate.setKeySerializer(new StringRedisSerializer()); 实现 </p></div></section></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="../mysql/ch52s05.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="../pt03.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch53s02.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">JPQL @Query </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> RedisTemplate</td></tr></table></div></footer></body></html>