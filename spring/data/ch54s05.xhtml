<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>mongoTemplate</title><link rel="stylesheet" type="text/css" href="../docbook.css"/><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot"/><meta name="keywords" content="Spring, Spring Boot, Spring Cloud, Spring Eureka, Spring Config"/><link rel="prev" href="ch54s04.xhtml" title="MongoRepository"/><link rel="next" href="ch54s06.xhtml" title="GeoJson 反序列化"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">mongoTemplate</th></tr><tr><td style="width: 20%; text-align: left; "><a accesskey="p" href="ch54s04.xhtml">上一页</a> </td><th style="width: 60%; text-align: center; ">第 54 章 Spring Data with MongoDB</th><td style="width: 20%; text-align: right; "> <a accesskey="n" href="ch54s06.xhtml">下一页</a></td></tr></table><hr/></div></header><section class="section" id="mongoTemplate"><div class="titlepage"><div><div><h2 class="title" style="clear: both">mongoTemplate</h2></div></div></div><p>导入与模板相关的包</p><pre class="programlisting">
		
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;		
		
		</pre><p>注入 MongoTemplate 对象</p><pre class="programlisting">
		
	@Autowired
	private MongoTemplate mongoTemplate;		
		
		</pre><section class="section" id="mongoTemplate.save"><div class="titlepage"><div><div><h3 class="title">Save 保存</h3></div></div></div><pre class="programlisting">
			
User user = new User();
user.setName("Netkiller"); 
mongoTemplate.save(user, "user");			
			
			</pre><p>更新数据</p><pre class="programlisting">
			
user = mongoTemplate.findOne(Query.query(Criteria.where("name").is("Jam")), User.class);
user.setName("Neo");
mongoTemplate.save(user, "user");	
			
			</pre></section><section class="section" id="mongoTemplate.insert"><div class="titlepage"><div><div><h3 class="title">Insert</h3></div></div></div><pre class="programlisting">
			
User user = new User();
user.setName("Neo");
mongoTemplate.insert(user, "user");			
			
			</pre><pre class="programlisting">
			
BSONObject personBsonObj = BasicDBObjectBuilder.start()
                .add("name","Neo Chen")
                .add("age",27)
                .add("address",null).get();

mongoTemplate.insert(personBsonObj,"personCollection");
			
			</pre><p>document in the db:</p><pre class="screen">
			
db.personCollection.findOne().pretty();
{"age":21,"name":"John Doe";"address":null}*			
			
			</pre></section><section class="section" id="mongoTemplate.updateFirst"><div class="titlepage"><div><div><h3 class="title">updateFirst 修改符合条件第一条记录</h3></div></div></div><p>updateFirst 修改符合条件第一条记录</p><pre class="programlisting">
			
Query query = new Query();
query.addCriteria(Criteria.where("name").is("Neo"));
Update update = new Update();
update.set("name", "Netkiller");
mongoTemplate.updateFirst(query, update, User.class);			
			
			</pre></section><section class="section" id="mongoTemplate.updateMulti"><div class="titlepage"><div><div><h3 class="title">updateMulti 修改符合条件的所有</h3></div></div></div><p>更新所有数据</p><pre class="programlisting">
			
Query query = new Query();
query.addCriteria(Criteria.where("name").is("Neo"));
Update update = new Update();
update.set("name", "Jerry");
mongoTemplate.updateMulti(query, update, User.class);			
			
			</pre></section><section class="section" id="mongoTemplate.findAndModify"><div class="titlepage"><div><div><h3 class="title">查找并保存</h3></div></div></div><pre class="programlisting">
			
Query query = new Query();
query.addCriteria(Criteria.where("name").is("Luck"));
Update update = new Update();
update.set("name", "Lisa");
User user = mongoTemplate.findAndModify(query, update, User.class);			
			
			</pre></section><section class="section" id="mongoTemplate.upsert"><div class="titlepage"><div><div><h3 class="title">upsert - 修改符合条件时如果不存在则添加</h3></div></div></div><pre class="programlisting">
			
Query query = new Query();
query.addCriteria(Criteria.where("name").is("Green"));
Update update = new Update();
update.set("name", "Tom");
mongoTemplate.upsert(query, update, User.class);			
			
			</pre><pre class="programlisting">
			
mongoTemplate.upsert(new Query(Criteria.where("age").is("18")), new Update().set("name", "neo"), collectionName);			
			
			</pre></section><section class="section" id="mongoTemplate.remove"><div class="titlepage"><div><div><h3 class="title">删除</h3></div></div></div><pre class="programlisting">
			
User user = new User();
user.setId("5bbf091efd9557069c4a25c5")			
mongoTemplate.remove(user, "user");			
			
			</pre></section><section class="section" id="mongoTemplate.findOne"><div class="titlepage"><div><div><h3 class="title">查找一条数据</h3></div></div></div><pre class="programlisting">
			

public Person findOneByName(String name) {
   Query query = new Query();
   query.addCriteria(Criteria.where("name").is(name));
   return mongoTemplate.findOne(query, Person.class);
}		
			
			</pre></section><section class="section" id="mongoTemplate.find"><div class="titlepage"><div><div><h3 class="title">查找所有数据</h3></div></div></div><pre class="programlisting">
			
public List&lt;Person&gt; findByName(String name) {
   Query query = new Query();
   query.addCriteria(Criteria.where("name").is(name));
   return mongoTemplate.find(query, Person.class);
}				
			
			</pre></section><section class="section" id="mongoTemplate.query"><div class="titlepage"><div><div><h3 class="title">Query</h3></div></div></div><section class="section" id="query.skip.limit"><div class="titlepage"><div><div><h4 class="title">翻页</h4></div></div></div><pre class="programlisting">
				
public List&lt;Person&gt; getAllPersonPaginated(int pageNumber, int pageSize) {
   Query query = new Query();
   query.skip(pageNumber * pageSize);
   query.limit(pageSize);
   return mongoTemplate.find(query, Person.class);
}			
				
				</pre></section><section class="section" id="between"><div class="titlepage"><div><div><h4 class="title">between</h4></div></div></div><p>实现一个区间条件 new Criteria("createdDate").gte(beginDate).lte(endDate)</p><pre class="programlisting">
			
	public boolean AccountDeposit(Date beginDate, Date endDate) {

		MatchOperation matchOperation = match(new Criteria("createdDate").gte(beginDate).lte(endDate));
		GroupOperation groupOperation = group("loginname").sum("amount").as("amount");
		SortOperation sortOperation = sort(new Sort(Direction.ASC, "loginname"));

		Aggregation aggregation = newAggregation(matchOperation, groupOperation, sortOperation);
		AggregationResults&lt;AccountSettlementDetails&gt; results = mongoTemplate.aggregate(aggregation, AccountSettlementDetails.class, AccountSettlementDetails.class);

		if (results.getMappedResults() != null) {
			log.info(results.getRawResults().get("result").toString());
			for (AccountSettlementDetails settlementDetails : results.getMappedResults()) {
							
				log.info("{}", settlementDetails.toString());
				
			}
		}
		return true;
	}
			
				</pre></section></section><section class="section" id="Criteria"><div class="titlepage"><div><div><h3 class="title">Criteria</h3></div></div></div><section class="section" id="Criteria.is"><div class="titlepage"><div><div><h4 class="title">is</h4></div></div></div><pre class="programlisting">
			
Query query = new Query();
query.addCriteria(Criteria.where("name").is("Neo"));
List&lt;User&gt; users = mongoTemplate.find(query, User.class);		
			
				</pre></section><section class="section" id="Criteria.regex"><div class="titlepage"><div><div><h4 class="title">Regex 正则表达式搜索</h4></div></div></div><p>查询以N开头的名字</p><pre class="programlisting">
			
Query query = new Query();
query.addCriteria(Criteria.where("name").regex("^N"));
List&lt;User&gt; users = mongoTemplate.find(query,User.class);	
			
				</pre><p>查询以o结尾的名字</p><pre class="programlisting">
			
Query query = new Query();
query.addCriteria(Criteria.where("name").regex("o$"));
List&lt;User&gt; users = mongoTemplate.find(query, User.class);
			
				</pre></section><section class="section" id="Criteria.ltgt"><div class="titlepage"><div><div><h4 class="title">lt 和 gt</h4></div></div></div><p>查询年龄小于 &lt; 30 并 &gt; 20 的用户</p><pre class="programlisting">
			
Query query = new Query();
query.addCriteria(Criteria.where("age").lt(30).gt(20));
List&lt;User&gt; users = mongoTemplate.find(query,User.class);
			
				</pre><p>查找日期范围</p><pre class="programlisting">
			
Date start = DateUtil.convertStringToDateTime("2014-02-10 20:38:44");
Date end = DateUtil.convertStringToDateTime("2014-02-10 20:38:50");
					
Query query = new Query();
Criteria criteria = Criteria.where("delflag").is(false);
criteria.and("modifyDate").gte(start).lte(end);
query.addCriteria(criteria);
query.limit(10);
			
			
				</pre></section><section class="section" id="Criteria.exists"><div class="titlepage"><div><div><h4 class="title">exists()</h4></div></div></div><pre class="programlisting">
				
Query query = new Query();
query.addCriteria(
    new Criteria().andOperator(
        Criteria.where("field1").exists(true),
        Criteria.where("field1").ne(false)
    )
);

List&lt;Foo&gt; result = mongoTemplate.find(query, Foo.class);
System.out.println("query - " + query.toString());

for (Foo foo : result) {
    System.out.println("result - " + foo);
}			
				
				</pre></section><section class="section" id="Criteria.in"><div class="titlepage"><div><div><h4 class="title">包含</h4></div></div></div><pre class="programlisting">
				
public List&lt;Person&gt; findByFavoriteBooks(String favoriteBook) {
   Query query = new Query();
   query.addCriteria(Criteria.where("favoriteBooks").in(favoriteBook));
   return mongoTemplate.find(query, Person.class);
}				
				
				</pre></section></section><section class="section" id="Update"><div class="titlepage"><div><div><h3 class="title">Update</h3></div></div></div><section class="section" id="Update.set"><div class="titlepage"><div><div><h4 class="title">set</h4></div></div></div><pre class="programlisting">
				
Update update = new Update();
update.set("name", "Netkiller");				
				
				</pre></section><section class="section" id="Update.push"><div class="titlepage"><div><div><h4 class="title">追加数据</h4></div></div></div><pre class="programlisting">
				
	Query query = Query.query(Criteria.where("id").is("5bbf091efd9557069c4a25c5"));
	Update update = new Update().push("author", new Author("neo", "chen"));
	mongoTemplate.updateFirst(query, update, Article.class);				
				
				</pre></section><section class="section" id="Update.update"><div class="titlepage"><div><div><h4 class="title">更新数据</h4></div></div></div><pre class="programlisting">
				
	Query query = Query.query(Criteria.where("classId").is("1").and("Students.studentId").is("1"));
    Update update = Update.update("Students.$.name", "lisa");
    mongoTemplate.upsert(query, update, "class");
				
				</pre></section><section class="section" id="Update.unset"><div class="titlepage"><div><div><h4 class="title">删除数据</h4></div></div></div><pre class="programlisting">
				
	Query query = Query.query(Criteria.where("classId").is("1").and("Students.studentId").is("3"));
	Update update = new Update();
	update.unset("Students.$");
	mongoTemplate.updateFirst(query, update, "class");				
				
				</pre></section><section class="section" id="Update.inc"><div class="titlepage"><div><div><h4 class="title">inc</h4></div></div></div><pre class="programlisting">
				
public void updateMultiplePersonAge() {
   Query query = new Query();
   Update update = new Update().inc("age", 1);
   mongoTemplate.findAndModify(query, update, Person.class);;
}
				
				</pre></section><section class="section" id="Update.addToSet"><div class="titlepage"><div><div><h4 class="title">update.addToSet</h4></div></div></div><pre class="programlisting">
				
Query query = Query.query(Criteria.where("classId").is("1"));
Student student = new Student("1", "lisa", 3, "girl");
Update update = new Update();
update.addToSet("Students", student);
mongoTemplate.upsert(query, update, "class");				
				
				</pre></section></section><section class="section" id="BasicUpdate"><div class="titlepage"><div><div><h3 class="title">BasicUpdate</h3></div></div></div><p>BasicUpdate 是底层更新可操作，需要手动实现$set等语句</p><pre class="programlisting">
			
BasicDBObject basicDBObject = new BasicDBObject();  
basicDBObject.put("$set", new BasicDBObject("date","2018-09-09"));  
Update update = new BasicUpdate(basicDBObject);  
mongoTemplate.updateFirst(new Query(Criteria.where("nickname").is("netkiller")), update,collectionName);  			
			
			</pre></section><section class="section" id="sort"><div class="titlepage"><div><div><h3 class="title">Sort</h3></div></div></div><p>按照年龄排序</p><pre class="programlisting">
			
Query query = new Query();
query.with(new Sort(Sort.Direction.ASC, "age"));
List&lt;User&gt; users = mongoTemplate.find(query,User.class);
			
			</pre></section><section class="section" id="PageRequest"><div class="titlepage"><div><div><h3 class="title">Query + PageRequest</h3></div></div></div><pre class="programlisting">
			
final Pageable pageableRequest = new PageRequest(0, 2);
Query query = new Query();
query.with(pageableRequest);
			
			</pre></section><section class="section" id="newAggregation"><div class="titlepage"><div><div><h3 class="title">newAggregation</h3></div></div></div><pre class="programlisting">
			
		MultilevelDirectSellingAccountRewardsSettlementDetails multilevelDirectSellingAccountRewardsSettlementDetails = new MultilevelDirectSellingAccountRewardsSettlementDetails();
		multilevelDirectSellingAccountRewardsSettlementDetails.setLoginname("111");
		multilevelDirectSellingAccountRewardsSettlementDetails.setPhone("111");
		multilevelDirectSellingAccountRewardsSettlementDetails.setRecommenderLoginname("111");
		multilevelDirectSellingAccountRewardsSettlementDetails.setRecommenderPhone("111");
		multilevelDirectSellingAccountRewardsSettlementDetails.setRecommenderName("Neo");
		multilevelDirectSellingAccountRewardsSettlementDetails.setRecommenderType("客户");
		multilevelDirectSellingAccountRewardsSettlementDetails.setAmount(5.02);
		multilevelDirectSellingAccountRewardsSettlementDetails.setCreatedDate(new Date());
		multilevelDirectSellingAccountRewardsSettlementDetailsRepository.save(multilevelDirectSellingAccountRewardsSettlementDetails);
		
		Date beginDate = this.getToday("00:00:00");
		Date endDate = this.getToday("23:59:59");
		log.info(beginDate.toString() + " ~ " + endDate.toString());
		
		GroupOperation groupOperation = group("loginname").sum("amount").as("amount");
		MatchOperation matchOperation = match(new Criteria("createdDate").gte(beginDate).lte(endDate));
		SortOperation sortOperation = sort(new Sort(Direction.ASC, "loginname"));

		Aggregation aggregation = newAggregation(matchOperation, groupOperation, sortOperation);
		AggregationResults&lt;MultilevelDirectSellingAccountRewardsSettlementDetails&gt; results = mongoTemplate.aggregate(aggregation, MultilevelDirectSellingAccountRewardsSettlementDetails.class, MultilevelDirectSellingAccountRewardsSettlementDetails.class);		
		System.out.println(results.getRawResults().get("result").toString());
			
			</pre></section><section class="section" id="indexOps"><div class="titlepage"><div><div><h3 class="title">创建索引</h3></div></div></div><pre class="programlisting">
			
mongoOps.indexOps(User.class).ensureIndex(new Index().on("name", Direction.ASC));			
			
			</pre></section><section class="section" id="mongoTemplate.subobject"><div class="titlepage"><div><div><h3 class="title">子对象操作</h3></div></div></div><section class="section" id="id1227"><div class="titlepage"><div><div><h4 class="title">List 类型</h4></div></div></div><pre class="programlisting">
				
package cn.netkiller.api.domain;

import java.util.List;

import javax.persistence.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document
public class Article {

	@Id
	private String id;
	private String title;
	private String description;

	List&lt;Author&gt; author;
	public static class Author {
		private String id;
		private String firstname;
		private String lastname;

		public Author(String firstname, String lastname) {
			this.firstname = firstname;
			this.lastname = lastname;
		}
	}
}
				
				</pre><p>更新</p><pre class="screen">
				
db.getCollection('foo').update({"author.firstname":"neo"},{"$set":{"author.$.firstname":"netkiller"}})					
				
				</pre><p>更新数据</p><pre class="programlisting">
				
	Query query = Query.query(Criteria.where("author.firstname").is("neo"));
	Update update = new Update().set("author.$.firstname", "netkiller");
	mongoTemplate.updateFirst(query, update, Article.class);
				
				</pre><p>追加数据</p><pre class="programlisting">
				
	Query query = Query.query(Criteria.where("id").is("5bbf091efd9557069c4a25c5"));
	Update update = new Update().push("author", new Author("neo", "chen"));
	mongoTemplate.updateFirst(query, update, Article.class);				
				
				</pre><p>删除数据</p><pre class="programlisting">
				
		Query query = Query.query(Criteria.where("id").is("5bbf091efd9557069c4a25c5"));
		Update update = new Update().pull("author", new Author("jerry", "lee"));
		mongoTemplate.updateFirst(query, update, Article.class);				
				
				</pre></section></section></section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="width: 40%; text-align: left; "><a accesskey="p" href="ch54s04.xhtml">上一页</a> </td><td style="width: 20%; text-align: center; "><a accesskey="u" href="ch54.xhtml">上一级</a></td><td style="width: 40%; text-align: right; "> <a accesskey="n" href="ch54s06.xhtml">下一页</a></td></tr><tr><td style="width: 40%; text-align: left; vertical-align: top; ">MongoRepository </td><td style="width: 20%; text-align: center; "><a accesskey="h" href="../index.xhtml">起始页</a></td><td style="width: 40%; text-align: right; vertical-align: top; "> GeoJson 反序列化</td></tr></table></div></footer></body></html>